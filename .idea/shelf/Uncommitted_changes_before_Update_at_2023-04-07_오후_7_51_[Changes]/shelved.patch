Index: src/main/java/spaceinvaders/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spaceinvaders;\r\n\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferStrategy;\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.Random;\r\nimport java.util.Set;\r\n\r\nimport javax.swing.*;\r\n\r\nimport spaceinvaders.entity.AlienEntity;\r\nimport spaceinvaders.entity.Entity;\r\nimport spaceinvaders.entity.ShipEntity;\r\nimport spaceinvaders.entity.ShotEntity;\r\n\r\n/**\r\n * The main hook of our game. This class with both act as a manager\r\n * for the display and central mediator for the game logic. \r\n * \r\n * Display management will consist of a loop that cycles round all\r\n * entities in the game asking them to move and then drawing them\r\n * in the appropriate place. With the help of an inner class it\r\n * will also allow the player to control the main ship.\r\n * \r\n * As a mediator it will be informed when entities within our game\r\n * detect events (e.g. alient killed, played died) and will take\r\n * appropriate game actions.\r\n * \r\n * @author Kevin Glass\r\n */\r\npublic class Game extends Canvas \r\n{\r\n\t/** The stragey that allows us to use accelerate page flipping */\r\n\tprivate BufferStrategy strategy;\r\n\t/** True if the game is currently \"running\", i.e. the game loop is looping */\r\n\tprivate boolean gameRunning = true;\r\n\t/** The list of all the entities that exist in our game */\r\n\tprivate ArrayList entities = new ArrayList();\r\n\t/** The list of entities that need to be removed from the game this loop */\r\n\tprivate ArrayList removeList = new ArrayList();\r\n\t/** The entity representing the player */\r\n\tprivate Entity ship;\r\n\t/** The speed at which the player's ship should move (pixels/sec) */\r\n\tprivate double moveSpeed = 300;\r\n\t/** The time at which last fired a shot */\r\n\tprivate long lastFire = 0;\r\n\t/** The interval between our players shot (ms) */\r\n\tprivate long firingInterval = 500;\r\n\t/** The number of aliens left on the screen */\r\n\tprivate int alienCount;\r\n\t\r\n\t/** The message to display which waiting for a key press */\r\n\tprivate String message = \"\";\r\n\t/** True if we're holding up game play until a key has been pressed */\r\n\tprivate boolean waitingForKeyPress = true;\r\n\t/** True if the left cursor key is currently pressed */\r\n\tprivate boolean leftPressed = false;\r\n\t/** True if the right cursor key is currently pressed */\r\n\tprivate boolean rightPressed = false;\r\n\t/** down movement key detection */\r\n\tprivate boolean downPressed = false;\r\n\t/** up movement key detection */\r\n\tprivate boolean upPressed = false;\r\n\t/** True if we are firing */\r\n\tprivate boolean firePressed = false;\r\n\t/** True if game logic needs to be applied this loop, normally as a result of a game event */\r\n\tprivate boolean logicRequiredThisLoop = false;\r\n\t/** The last time at which we recorded the frame rate */\r\n\tprivate long lastFpsTime;\r\n\t/** The current number of frames recorded */\r\n\tprivate int fps;\r\n\t/** The normal title of the game window */\r\n\tprivate String windowTitle = \"Space Invaders 102\";\r\n\t/** The game window that we'll update with the frame count */\r\n\tprivate JFrame container;\r\n\t\r\n\t/**\r\n\t * Construct our game and set it running.\r\n\t */\r\n\tpublic Game() {\r\n\t\t// create a frame to contain our game\r\n\t\tcontainer = new JFrame(\"Space Invaders 102\");\r\n\r\n\t\t// get hold the content of the frame and set up the resolution of the game\r\n\t\tJPanel panel = (JPanel) container.getContentPane();\r\n\t\tpanel.setPreferredSize(new Dimension(800,600));\r\n\t\tpanel.setLayout(null);\r\n\r\n\t\t// setup our canvas size and put it into the content of the frame\r\n\t\tsetBounds(0,0,800,600);\r\n\t\tpanel.add(this);\r\n\r\n\t\t// Tell AWT not to bother repainting our canvas since we're\r\n\t\t// going to do that our self in accelerated mode\r\n\t\tsetIgnoreRepaint(true);\r\n\r\n\t\t// finally make the window visible\r\n\t\tcontainer.pack();\r\n\t\tcontainer.setResizable(false);\r\n\t\tcontainer.setVisible(true);\r\n\r\n\t\t// add a listener to respond to the user closing the window. If they\r\n\t\t// do we'd like to exit the game\r\n\t\tcontainer.addWindowListener(new WindowAdapter() {\r\n\t\t\tpublic void windowClosing(WindowEvent e) {\r\n\t\t\t\tSystem.exit(0);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// add a key input system (defined below) to our canvas\r\n\t\t// so we can respond to key pressed\r\n\t\taddKeyListener(new KeyInputHandler());\r\n\r\n\t\t// request the focus so key events come to us\r\n\t\trequestFocus();\r\n\r\n\t\t// create the buffering strategy which will allow AWT\r\n\t\t// to manage our accelerated graphics\r\n\t\tcreateBufferStrategy(2 );\r\n\t\tstrategy = getBufferStrategy();\r\n\r\n\t\t// initialise the entities in our game so there's something\r\n\t\t// to see at startup\r\n\r\n\t\tnew LoginPage();\r\n\t\tnew MFirebaseTool().hashCode();\r\n\t\tinitEntities();\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Start a fresh game, this should clear out any old data and\r\n\t * create a new set.\r\n\t */\r\n\tprivate void startGame() {\r\n\t\t// clear out any existing entities and intialise a new set\r\n\t\tentities.clear();\r\n\t\tinitEntities();\r\n\t\t\r\n\t\t// blank out any keyboard settings we might currently have\r\n\t\tleftPressed = false;\r\n\t\trightPressed = false;\r\n\t\tupPressed = false;\r\n\t\tdownPressed = false;\r\n\t\tfirePressed = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialise the starting state of the entities (ship and aliens). Each\r\n\t * entitiy will be added to the overall list of entities in the game.\r\n\t */\r\n\r\n//\tprivate void initEntities() {\r\n//\t\t// create the player ship and place it roughly in the center of the screen\r\n//\t\tship = new ShipEntity(this, \"sprites/ship.gif\",370,550);\r\n//\t\tentities.add(ship);\r\n//\r\n//\r\n//\t\tint alienCount = 50; // number of aliens\r\n//\t\tint alienWidth = 50; // width of each alien\r\n//\t\tint alienHeight = 30; // height of each alien\r\n//\t\tint minY = 10; // minimum y-coordinate\r\n//\t\tint maxY = 200; // maximum y-coordinate\r\n//\r\n//\t\tSet<Point> points = new HashSet<>(); // set to keep track of the generated points\r\n//\t\tRandom random = new Random();\r\n//\r\n//\t\twhile (points.size() < alienCount) {\r\n//\t\t\tint x = random.nextInt(getWidth() - alienWidth);\r\n//\t\t\tint y = random.nextInt(maxY - minY) + minY;\r\n//\r\n//\t\t\t// check if the new point overlaps with any existing points\r\n//\t\t\tboolean overlapping = false;\r\n//\t\t\tfor (Point point : points) {\r\n//\t\t\t\tif (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {\r\n//\t\t\t\t\toverlapping = true;\r\n//\t\t\t\t\tbreak;\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n//\r\n//\t\t\t// if not overlapping, add the new point to the set\r\n//\t\t\tif (!overlapping) {\r\n//\t\t\t\tpoints.add(new Point(x, y));\r\n//\t\t\t}\r\n//\t\t}\r\n//\r\n//// create aliens for each generated point\r\n//\t\tfor (Point point : points) {\r\n//\t\t\tEntity alien = new AlienEntity(this, point.x, point.y);\r\n//\t\t\tentities.add(alien);\r\n//\t\t}}\r\n\tprivate void initEntities() {\r\n\t\t// create the player ship and place it roughly in the center of the screen\r\n\t\tship = new ShipEntity(this, \"sprites/ship.gif\", 370, 550);\r\n\t\tentities.add(ship);\r\n\r\n\t\tfinal int alienCount = 50; // number of aliens\r\n\t\tint alienWidth = 50; // width of each alien\r\n\t\tint alienHeight = 30; // height of each alien\r\n\t\tint minY = 10; // minimum y-coordinate\r\n\t\tint maxY = 200; // maximum y-coordinate\r\n\t\tint delay = 1000; // time delay between each batch of aliens (in milliseconds)\r\n\r\n\t\tfinal Set<Point> points = new HashSet<>(); // set to keep track of the generated points\r\n\t\tRandom random = new Random();\r\n\r\n\t\twhile (points.size() < alienCount) {\r\n\t\t\tint x = random.nextInt(getWidth() - alienWidth);\r\n\t\t\tint y = random.nextInt(maxY - minY) + minY;\r\n\r\n\t\t\t// check if the new point overlaps with any existing points\r\n\t\t\tboolean overlapping = false;\r\n\t\t\tfor (Point point : points) {\r\n\t\t\t\tif (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {\r\n\t\t\t\t\toverlapping = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if not overlapping, add the new point to the set\r\n\t\t\tif (!overlapping) {\r\n\t\t\t\tpoints.add(new Point(x, y));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// create a timer to add aliens every delay milliseconds\r\n\t\tTimer timer = new Timer(delay, new ActionListener() {\r\n\t\t\tint count = 0;\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\t\t\t\tif (count < alienCount) {\r\n\t\t\t\t\tPoint point = points.toArray(new Point[0])[count];\r\n\t\t\t\t\tEntity alien = new AlienEntity(Game.this, point.x, point.y);\r\n\t\t\t\t\tentities.add(alien);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\ttimer.start();\r\n\t}\r\n\t/**\r\n             * Notification from a game entity that the logic of the game\r\n             * should be run at the next opportunity (normally as a result of some\r\n             * game event)\r\n             */\r\n\r\n\tpublic void updateLogic() {\r\n\t\tlogicRequiredThisLoop = true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove an entity from the game. The entity removed will\r\n\t * no longer move or be drawn.\r\n\t * \r\n\t * @param entity The entity that should be removed\r\n\t */\r\n\tpublic void removeEntity(Entity entity) {\r\n\t\tremoveList.add(entity);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Notification that the player has died. \r\n\t */\r\n\tpublic void notifyDeath() {\r\n\t\tmessage = \"Oh no! They got you, try again?\";\r\n\t\twaitingForKeyPress = true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Notification that the player has won since all the aliens\r\n\t * are dead.\r\n\t */\r\n\tpublic void notifyWin() {\r\n\t\tmessage = \"Well done! You Win!\";\r\n\t\twaitingForKeyPress = true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Notification that an alien has been killed\r\n\t */\r\n\tpublic void notifyAlienKilled() {\r\n\t\t// reduce the alient count, if there are none left, the player has won!\r\n\t\talienCount--;\r\n\t\t\r\n\t\tif (alienCount == 0) {\r\n\t\t\tnotifyWin();\r\n\t\t}\r\n\t\t\r\n\t\t// if there are still some aliens left then they all need to get faster, so\r\n\t\t// speed up all the existing aliens\r\n\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\r\n\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t// speed up by 2%\r\n\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement() * 1.02);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Attempt to fire a shot from the player. Its called \"try\"\r\n\t * since we must first check that the player can fire at this \r\n\t * point, i.e. has he/she waited long enough between shots\r\n\t */\r\n\tpublic void tryToFire() {\r\n\t\t// check that we have waiting long enough to fire\r\n\t\tif (System.currentTimeMillis() - lastFire < firingInterval) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\tlastFire = System.currentTimeMillis();\r\n\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.gif\",ship.getX()+10,ship.getY()-30);\r\n\t\tentities.add(shot);\r\n\t}\r\n\t\r\n\t/**\r\n\t * The main game loop. This loop is running during all game\r\n\t * play as is responsible for the following activities:\r\n\t * <p>\r\n\t * - Working out the speed of the game loop to update moves\r\n\t * - Moving the game entities\r\n\t * - Drawing the screen contents (entities, text)\r\n\t * - Updating game events\r\n\t * - Checking Input\r\n\t * <p>\r\n\t */\r\n\tpublic void gameLoop() {\r\n\t\tlong lastLoopTime = SystemTimer.getTime();\r\n\t\t\r\n\t\t// keep looping round til the game ends\r\n\t\twhile (gameRunning) {\r\n\t\t\t// work out how long its been since the last update, this\r\n\t\t\t// will be used to calculate how far the entities should\r\n\t\t\t// move this loop\r\n\t\t\tlong delta = SystemTimer.getTime() - lastLoopTime;\r\n\t\t\tlastLoopTime = SystemTimer.getTime();\r\n\r\n\t\t\t// update the frame counter\r\n\t\t\tlastFpsTime += delta;\r\n\t\t\tfps++;\r\n\t\t\t\r\n\t\t\t// update our FPS counter if a second has passed since\r\n\t\t\t// we last recorded\r\n\t\t\tif (lastFpsTime >= 1000) {\r\n\t\t\t\tcontainer.setTitle(windowTitle+\" (FPS: \"+fps+\")\");\r\n\t\t\t\tlastFpsTime = 0;\r\n\t\t\t\tfps = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Get hold of a graphics context for the accelerated \r\n\t\t\t// surface and blank it out\r\n\t\t\tGraphics2D g = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tg.setColor(Color.black);\r\n\t\t\tg.fillRect(0,0,800,600);\r\n\t\t\t\r\n\t\t\t// cycle round asking each entity to move itself\r\n\t\t\tif (!waitingForKeyPress) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\t\t\r\n\t\t\t\t\tentity.move(delta);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// cycle round drawing all the entities we have in the game\r\n\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\t\r\n\t\t\t\tentity.draw(g);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// brute force collisions, compare every entity against\r\n\t\t\t// every other entity. If any of them collide notify \r\n\t\t\t// both entities that the collision has occured\r\n\t\t\tfor (int p=0;p<entities.size();p++) {\r\n\t\t\t\tfor (int s=p+1;s<entities.size();s++) {\r\n\t\t\t\t\tEntity me = (Entity) entities.get(p);\r\n\t\t\t\t\tEntity him = (Entity) entities.get(s);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (me.collidesWith(him)) {\r\n\t\t\t\t\t\tme.collidedWith(him);\r\n\t\t\t\t\t\thim.collidedWith(me);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// remove any entity that has been marked for clear up\r\n\t\t\tentities.removeAll(removeList);\r\n\t\t\tremoveList.clear();\r\n\r\n\t\t\t// if a game event has indicated that game logic should\r\n\t\t\t// be resolved, cycle round every entity requesting that\r\n\t\t\t// their personal logic should be considered.\r\n\t\t\tif (logicRequiredThisLoop) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\t\tentity.doLogic();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlogicRequiredThisLoop = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// if we're waiting for an \"any key\" press then draw the \r\n\t\t\t// current message \r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tg.setColor(Color.white);\r\n\t\t\t\tg.drawString(message,(800-g.getFontMetrics().stringWidth(message))/2,250);\r\n\t\t\t\tg.drawString(\"Press any key\",(800-g.getFontMetrics().stringWidth(\"Press any key\"))/2,300);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// finally, we've completed drawing so clear up the graphics\r\n\t\t\t// and flip the buffer over\r\n\t\t\tg.dispose();\r\n\t\t\tstrategy.show();\r\n\t\t\t\r\n\t\t\t// resolve the movement of the ship. First assume the ship \r\n\t\t\t// isn't moving. If either cursor key is pressed then\r\n\t\t\t// update the movement appropraitely\r\n\r\n\t\t\tif ((leftPressed)&&(!rightPressed)&&(!upPressed)&&(!downPressed)){\r\n\t\t\t\tship.setHorizontalMovement(-moveSpeed);\r\n\t\t\t}\r\n\t\t\t//right unique move\r\n\t\t\telse if ((rightPressed)&&(!leftPressed)&&(!upPressed)&&(!downPressed)){\r\n\t\t\t\tship.setHorizontalMovement(moveSpeed);\r\n\t\t\t}\r\n\t\t\t//up unique move\r\n\t\t\telse if ((upPressed)&&(!downPressed)&&(!rightPressed)&&(!leftPressed)){\r\n\t\t\t\tship.setVerticalMovement(-moveSpeed);\r\n\t\t\t}\r\n\t\t\t//down unique move\r\n\t\t\telse if ((downPressed)&&(!upPressed)&&(!rightPressed)&&(!leftPressed)){\r\n\t\t\t\tship.setVerticalMovement(moveSpeed);\r\n\t\t\t}\r\n\t\t\t//left&up degree 45\r\n\t\t\telse if((leftPressed)&&(upPressed)&&(!rightPressed)&&(!downPressed)){\r\n\t\t\t\tship.setVerticalMovement(-moveSpeed);\r\n\t\t\t\tship.setHorizontalMovement(-moveSpeed);\r\n\t\t\t}\r\n\t\t\telse if((leftPressed)&&(downPressed)&&(!rightPressed)&&(!upPressed)){\r\n\t\t\t\tship.setVerticalMovement(moveSpeed);\r\n\t\t\t\tship.setHorizontalMovement(-moveSpeed);\r\n\t\t\t}\r\n\t\t\telse if((rightPressed)&&(upPressed)&&(!downPressed)&&(!leftPressed)){\r\n\t\t\t\tship.setVerticalMovement(-moveSpeed);\r\n\t\t\t\tship.setHorizontalMovement(moveSpeed);\r\n\t\t\t}\r\n\t\t\telse if((rightPressed)&&(downPressed)&&(!upPressed)&&(!leftPressed)){\r\n\t\t\t\tship.setVerticalMovement(moveSpeed);\r\n\t\t\t\tship.setHorizontalMovement(moveSpeed);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// if we're pressing fire, attempt to fire\r\n\t\t\tif (firePressed) {\r\n\t\t\t\ttryToFire();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// we want each frame to take 10 milliseconds, to do this\r\n\t\t\t// we've recorded when we started the frame. We add 10 milliseconds\r\n\t\t\t// to this and then factor in the current time to give \r\n\t\t\t// us our final value to wait for\r\n\t\t\tSystemTimer.sleep(lastLoopTime+10-SystemTimer.getTime());\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * A class to handle keyboard input from the user. The class\r\n\t * handles both dynamic input during game play, i.e. left/right \r\n\t * and shoot, and more static type input (i.e. press any key to\r\n\t * continue)\r\n\t * \r\n\t * This has been implemented as an inner class more through \r\n\t * habbit then anything else. Its perfectly normal to implement\r\n\t * this as seperate class if slight less convienient.\r\n\t * \r\n\t * @author Kevin Glass\r\n\t */\r\n\tprivate class KeyInputHandler extends KeyAdapter {\r\n\t\t/** The number of key presses we've had while waiting for an \"any key\" press */\r\n\t\tprivate int pressCount = 1;\r\n\t\t\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been pressed. Note that\r\n\t\t * a key being pressed is equal to being pushed down but *NOT*\r\n\t\t * released. Thats where keyTyped() comes in.\r\n\t\t *\r\n\t\t * @param e The details of the key that was pressed \r\n\t\t */\r\n\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't \r\n\t\t\t// want to do anything with just a \"press\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP){\r\n\t\t\t\tupPressed = true;\r\n\t\t\t}\r\n\t\t\tif(e.getKeyCode() == KeyEvent.VK_DOWN){\r\n\t\t\t\tdownPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been released.\r\n\t\t *\r\n\t\t * @param e The details of the key that was released\r\n\t\t */\r\n\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"released\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP){\r\n\t\t\t\tupPressed = false;\r\n\t\t\t}\r\n\t\t\tif(e.getKeyCode() == KeyEvent.VK_DOWN){\r\n\t\t\t\tdownPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been typed. Note that\r\n\t\t * typing a key means to both press and then release it.\r\n\t\t *\r\n\t\t * @param e The details of the key that was typed. \r\n\t\t */\r\n\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t// if we're waiting for a \"any key\" type then\r\n\t\t\t// check if we've recieved any recently. We may\r\n\t\t\t// have had a keyType() event from the user releasing\r\n\t\t\t// the shoot or move keys, hence the use of the \"pressCount\"\r\n\t\t\t// counter.\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tif (pressCount == 1) {\r\n\t\t\t\t\t// since we've now recieved our key typed\r\n\t\t\t\t\t// event we can mark it as such and start \r\n\t\t\t\t\t// our new game\r\n\t\t\t\t\twaitingForKeyPress = false;\r\n\t\t\t\t\tstartGame();\r\n\t\t\t\t\tpressCount = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpressCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// if we hit escape, then quit the game\r\n\t\t\tif (e.getKeyChar() == 27) {\r\n\t\t\t\tSystem.exit(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * The entry point into the game. We'll simply create an\r\n\t * instance of class which will start the display and game\r\n\t * loop.\r\n\t * \r\n\t * @param argv The arguments that are passed into our game\r\n\t */\r\n\tpublic static void main(String argv[]) {\r\n\t\tGame g = new Game();\r\n\r\n\t\t// Start the main game loop, note: this method will not\r\n\t\t// return until the game has finished running. Hence we are\r\n\t\t// using the actual main thread to run the game.\r\n\t\tg.gameLoop();\r\n\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/spaceinvaders/Game.java b/src/main/java/spaceinvaders/Game.java
--- a/src/main/java/spaceinvaders/Game.java	(revision 77805c521bfa0a6720acc81fedc8e1d3ee70f514)
+++ b/src/main/java/spaceinvaders/Game.java	(date 1680864527696)
@@ -30,7 +30,7 @@
  * 
  * @author Kevin Glass
  */
-public class Game extends Canvas 
+public class Game extends Canvas
 {
 	/** The stragey that allows us to use accelerate page flipping */
 	private BufferStrategy strategy;
@@ -50,7 +50,7 @@
 	private long firingInterval = 500;
 	/** The number of aliens left on the screen */
 	private int alienCount;
-	
+
 	/** The message to display which waiting for a key press */
 	private String message = "";
 	/** True if we're holding up game play until a key has been pressed */
@@ -75,7 +75,10 @@
 	private String windowTitle = "Space Invaders 102";
 	/** The game window that we'll update with the frame count */
 	private JFrame container;
-	
+
+	private  Timer timer;
+	private Set<Point> points;
+
 	/**
 	 * Construct our game and set it running.
 	 */
@@ -130,16 +133,32 @@
 	}
 
 
-	
+
 	/**
 	 * Start a fresh game, this should clear out any old data and
 	 * create a new set.
 	 */
 	private void startGame() {
+
+
 		// clear out any existing entities and intialise a new set
 		entities.clear();
 		initEntities();
-		
+
+//		int delay = 1000;
+//		Timer timer = new Timer(delay, new ActionListener() {
+//			int count = 0;
+//
+//			@Override
+//			public void actionPerformed(ActionEvent e) {
+//				if (count < alienCount) {
+//					Point point = points.toArray(new Point[0])[count];
+//					Entity alien = new AlienEntity(Game.this, point.x, point.y);
+//					entities.add(alien);
+//					count++;
+//				} }});
+//		timer.start(); // 타이머 시작
+
 		// blank out any keyboard settings we might currently have
 		leftPressed = false;
 		rightPressed = false;
@@ -147,62 +166,23 @@
 		downPressed = false;
 		firePressed = false;
 	}
-	
+
 	/**
 	 * Initialise the starting state of the entities (ship and aliens). Each
 	 * entitiy will be added to the overall list of entities in the game.
 	 */
 
-//	private void initEntities() {
-//		// create the player ship and place it roughly in the center of the screen
-//		ship = new ShipEntity(this, "sprites/ship.gif",370,550);
-//		entities.add(ship);
-//
-//
-//		int alienCount = 50; // number of aliens
-//		int alienWidth = 50; // width of each alien
-//		int alienHeight = 30; // height of each alien
-//		int minY = 10; // minimum y-coordinate
-//		int maxY = 200; // maximum y-coordinate
-//
-//		Set<Point> points = new HashSet<>(); // set to keep track of the generated points
-//		Random random = new Random();
-//
-//		while (points.size() < alienCount) {
-//			int x = random.nextInt(getWidth() - alienWidth);
-//			int y = random.nextInt(maxY - minY) + minY;
-//
-//			// check if the new point overlaps with any existing points
-//			boolean overlapping = false;
-//			for (Point point : points) {
-//				if (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {
-//					overlapping = true;
-//					break;
-//				}
-//			}
-//
-//			// if not overlapping, add the new point to the set
-//			if (!overlapping) {
-//				points.add(new Point(x, y));
-//			}
-//		}
-//
-//// create aliens for each generated point
-//		for (Point point : points) {
-//			Entity alien = new AlienEntity(this, point.x, point.y);
-//			entities.add(alien);
-//		}}
 	private void initEntities() {
 		// create the player ship and place it roughly in the center of the screen
 		ship = new ShipEntity(this, "sprites/ship.gif", 370, 550);
 		entities.add(ship);
 
-		final int alienCount = 50; // number of aliens
+		final int alienCount = 30; // number of aliens
 		int alienWidth = 50; // width of each alien
 		int alienHeight = 30; // height of each alien
 		int minY = 10; // minimum y-coordinate
 		int maxY = 200; // maximum y-coordinate
-		int delay = 1000; // time delay between each batch of aliens (in milliseconds)
+		 // time delay between each batch of aliens (in milliseconds)
 
 		final Set<Point> points = new HashSet<>(); // set to keep track of the generated points
 		Random random = new Random();
@@ -224,23 +204,22 @@
 			if (!overlapping) {
 				points.add(new Point(x, y));
 			}
-		}
-
-		// create a timer to add aliens every delay milliseconds
-		Timer timer = new Timer(delay, new ActionListener() {
-			int count = 0;
+			int delay = 1000;
+			Timer timer = new Timer(delay, new ActionListener() {
+				int count = 0;
 
-			@Override
-			public void actionPerformed(ActionEvent e) {
-				if (count < alienCount) {
-					Point point = points.toArray(new Point[0])[count];
-					Entity alien = new AlienEntity(Game.this, point.x, point.y);
-					entities.add(alien);
-					count++;
-				}
-			}
-		});
-		timer.start();
+				@Override
+				public void actionPerformed(ActionEvent e) {
+					if (count < alienCount) {
+						Point point = points.toArray(new Point[0])[count];
+						Entity alien = new AlienEntity(Game.this, point.x, point.y);
+						entities.add(alien);
+						count++;
+					} }});
+			timer.start(); // 타이머 시작
+		}
+
+		// create a timer to add aliens every delay milliseconds
 	}
 	/**
              * Notification from a game entity that the logic of the game
@@ -594,4 +573,4 @@
 		g.gameLoop();
 
 	}
-}
+		}
\ No newline at end of file
