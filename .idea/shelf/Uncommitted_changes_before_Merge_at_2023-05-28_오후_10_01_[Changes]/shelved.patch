Index: src/main/java/spaceinvaders/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spaceinvaders;\r\n\r\nimport spaceinvaders.entity.*;\r\nimport javax.swing.*;\r\nimport java.util.Timer;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferStrategy;\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.Random;\r\nimport java.util.Set;\r\nimport java.util.*;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport javax.sound.sampled.AudioInputStream;\r\nimport javax.sound.sampled.AudioSystem;\r\nimport javax.sound.sampled.Clip;\r\nimport javax.sound.sampled.FloatControl;\r\n\r\n/**\r\n * The main hook of our game. This class with both act as a manager\r\n * for the display and central mediator for the game logic.\r\n *\r\n * Display management will consist of a loop that cycles round all\r\n * entities in the game asking them to move and then drawing them\r\n * in the appropriate place. With the help of an inner class it\r\n * will also allow the player to control the main ship.\r\n *\r\n * As a mediator it will be informed when entities within our game\r\n * detect events (e.g. alient killed, played died) and will take\r\n * appropriate game actions.\r\n *\r\n * @author Kevin Glass\r\n */\r\npublic class Game extends Canvas {\r\n\t/**\r\n\t * The stragey that allows us to use accelerate page flipping\r\n\t */\r\n\tprivate final BufferStrategy strategy;\r\n\t/**\r\n\t * True if the game is currently \"running\", i.e. the game loop is looping\r\n\t */\r\n\tprivate final boolean gameRunning = true; private boolean stageRunning = false;\r\n\t/**\r\n\t * The list of all the entities that exist in our game\r\n\t */\r\n\tprivate final ArrayList<Entity> entities = new ArrayList<>();\r\n\t/**\r\n\t * The list of entities that need to be removed from the game this loop\r\n\t */\r\n\tprivate final ArrayList<Entity> removeList = new ArrayList<Entity>();\r\n\t/** The message to display which waiting for a key press */\r\n\tprivate String message = \"\";\r\n\t/** True if we're holding up game play until a key has been pressed */\r\n\tprivate boolean waitingForKeyPress = true;\r\n\t/** True if the left cursor key is currently pressed */\r\n\tprivate Entity[] ShipCounter = new ShipEntity[2]; private boolean multiPlay;\r\n\tprivate boolean leftPressed,left2Pressed, rightPressed, right2Pressed;\r\n\tprivate boolean upPressed, up2Pressed, downPressed, down2Pressed;\r\n\tprivate int Lonly, Ronly, Uonly, Donly, LnD, RnD, LnU, RnU;\r\n\tprivate boolean firePressed, fire2Pressed, player1Dead, player2Dead;\r\n\tprivate boolean goGo, keyP1Reverse, keyP2Reverse;\r\n\t/** True if game logic needs to be applied this loop, normally as a result of a game event */\r\n\tprivate boolean logicRequiredThisLoop = false;\r\n\tprivate boolean isGameStart = false;\r\n\t/**\r\n\t * The last time at which we recorded the frame rate\r\n\t */\r\n\tprivate long lastFpsTime;\r\n\t/**\r\n\t * The current number of frames recorded\r\n\t */\r\n\tprivate int fps, cycle;\r\n\t/**\r\n\t * The normal title of the game window\r\n\t */\r\n\tprivate final String windowTitle = \"Space Invaders 102\";\r\n\t/**\r\n\t * The game window that we'll update with the frame count\r\n\t */\r\n\tprivate final JFrame container;\r\n\tprivate int level = 1;\r\n\tprivate Timer timer;\r\n\tprivate static int genCount, alienCount;\r\n\tpublic static int killCount, liveCount;\r\n\tprivate static String bestScore = \"\";\r\n\tprivate FirebaseTool firebaseTool;\r\n\r\n\tprivate GlobalStorage globalStorage;\r\n\r\n\t//Record Variables\r\n\tprivate int tenToHundMillis, aSecond, aMinute;\r\n\t/** timedisplay */\r\n\tprivate String timeStamp=\"\";\r\n\tprivate long lastLoopTime; private long initTime;\r\n\tprivate RecordRecorder playBoard = new RecordRecorder(this);\r\n\r\n\tprivate static int alienVertSpeed=10, alienHoriSpeed=75;\r\n\tprivate JLabel backLabel;\r\n\tprivate Graphics2D userHUD;\r\n\tprivate Image image;\r\n\tprivate Game game = this;\r\n\r\n\t/**\r\n\t * Construct our game and set it running.\r\n\t */\r\n\tpublic Game(String option) {\r\n\t\tExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\t\tBackgroundMusic bgm = new BackgroundMusic(\"src/main/resources/audio/backgroundmusic.wav\", executorService);\r\n\t\texecutorService.execute(bgm);\r\n\r\n\t\tcycle = 0;\r\n\t\tif (option.equals(\"2p\")) {multiPlay = true; System.out.println(\"2p\");}\r\n\t\telse {multiPlay = false; System.out.println(\"1p\");}\r\n\t\t// create a frame to contain our game\r\n\t\tcontainer = new JFrame(\"Space Invaders 102\");\r\n\r\n\t\t// get hold the content of the frame and set up the resolution of the game\r\n\t\tJPanel panel = (JPanel) container.getContentPane();\r\n\t\tpanel.setPreferredSize(new Dimension(800,600));\r\n\t\tpanel.setLayout(null);\r\n\r\n\r\n\r\n\t\tJButton home = new JButton(\"HOME\");\r\n\t\thome.setBounds(0,0,80,30);\r\n\t\thome.setBackground(Color.BLACK);\r\n\t\thome.setOpaque(false);\r\n\t\thome.setForeground(Color.BLACK);\r\n\t\thome.setContentAreaFilled(false);\r\n\t\thome.addActionListener(new ActionListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n//\t\t\t\thome.setIcon(changeIconGoHome);\r\n\t\t\t\tbgm.stop();\r\n\t\t\t\tcontainer.dispose();\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t});\r\n\r\n\r\n\t\tpanel.add(home);\r\n\r\n\r\n\r\n\r\n\r\n\t\t/*TimeCounter timeCounter = new TimeCounter((int) 0);*/\r\n\t\t//panel.add(timeCounter);\r\n\t\t// setup our canvas size and put it into the content of the frame\r\n\t\tsetBounds(0,0,800,600);\r\n\t\tpanel.add(this);\r\n\t\t// TimeCounter 객체를 실행하는 Thread를 생성하고 시작합니다.\r\n\t\t/*timeCounterThread = new Thread(timeCounter);\r\n\t\ttimeCounterThread.start();*/\r\n\t\t// Tell AWT not to bother repainting our canvas since we're\r\n\t\t// going to do that our self in accelerated mode\r\n\t\tsetIgnoreRepaint(true);\r\n\t\t// finally make the window visible\r\n\t\tcontainer.pack();\r\n\t\tcontainer.setResizable(false);\r\n\t\tcontainer.setVisible(true);\r\n\t\t// add a listener to respond to the user closing the window. If they\r\n\t\t// do we'd like to exit the game\r\n\t\tcontainer.addWindowListener(new WindowAdapter() {\r\n\t\t\tpublic void windowClosing(WindowEvent e) {\r\n//\t\t\t\tSystem.exit(0);\r\n\t\t\t\tbgm.stop();\r\n\t\t\t}\r\n\t\t});\r\n\t\t// add a key input system (defined below) to our canvas\r\n\t\t// so we can respond to key pressed\r\n\t\taddKeyListener(new KeyInputHandler());\r\n\t\t// request the focus so key events come to us\r\n\t\trequestFocus();\r\n\t\t// create the buffering strategy which will allow AWT\r\n\t\t// to manage our accelerated graphics\r\n\t\tcreateBufferStrategy(2);\r\n\t\tstrategy = getBufferStrategy();\r\n\t\t// initialise the entities in our game so there's something\r\n\t\t// to see at startup\r\n\t\tfirebaseTool = FirebaseTool.getInstance();\r\n\t\tglobalStorage = GlobalStorage.getInstance();\r\n\t\tgenCount = 0;\r\n\t\tkillCount = 0;\r\n\t\talienCount = 0;\r\n\t\tliveCount = 0;\r\n\t\tplayBoard.scoreInit();\r\n\t\tinitEntities();\r\n\t}\r\n\t/**\r\n\t * Start a fresh game, this should clear out any old data and\r\n\t * create a new set.\r\n\t */\r\n\tprivate void startGame() {\r\n\r\n\r\n\r\n\t\t// clear out any existing entities and intialise a new set\r\n\t\tentities.clear();\r\n\t\tinitEntities();\r\n\t\t// blank out any keyboard settings we might currently have\r\n\t\tleftPressed = false;\r\n\t\trightPressed = false;\r\n\t\tupPressed = false;\r\n\t\tdownPressed = false;\r\n\t\tfirePressed = false;\r\n\t\tplayer1Dead = false;\r\n\r\n\t\t//2P key init\r\n\t\tleft2Pressed = false;\r\n\t\tright2Pressed = false;\r\n\t\tup2Pressed = false;\r\n\t\tdown2Pressed = false;\r\n\t\tfire2Pressed = false;\r\n\t\tplayer2Dead = false;\r\n\t\ttenToHundMillis=0; aSecond=0; aMinute=0;\r\n\t\t//윈도우랑 게임창 노래 겹쳐들림\r\n//\t\tnew BackgroundMusic();\r\n\r\n\t\tJButton home = new JButton(\"HOME\");\r\n\t\thome.setBounds(0,0,80,30);\r\n\t\thome.setBackground(Color.WHITE);\r\n\r\n\t}\r\n\tprivate void initEntities() {\r\n\t\tif (multiPlay){\r\n\t\t\tShipCounter[0] = new ShipEntity(this, \"sprites/ship1p.png\",350, 550, false);\r\n\t\t\tentities.add(ShipCounter[0]);\r\n\t\t\tShipCounter[1] = new ShipEntity(this, \"sprites/ship2p.png\",390, 550, true);\r\n\t\t\taddEntity(ShipCounter[1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tShipCounter[0] = new ShipEntity(this, \"sprites/ship1p.png\",370, 550, false);\r\n\t\t\tentities.add(ShipCounter[0]);\r\n\t\t}\r\n\t\tkillCount = 0;\r\n\t\t// create the aliens\r\n\t\tmessage =\"When you're ready, please press the button!\";\r\n\t}\r\n\tpublic void repeatGame(){\r\n\t\tif(level==4){\r\n\t\t\tsetAlienVertSpeed((int)(getAlienVertSpeed()*1.05));\r\n\t\t\tsetAlienHoriSpeed((int)(getAlienHoriSpeed()*1.05));\r\n\t\t\tstageRunning=false;\r\n\t\t\tlevel=1;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tsetAlienHoriSpeed(75);\r\n\t\t\tsetAlienVertSpeed(10);\r\n\t\t\tstageRunning=false;\r\n\t\t\tlevel=1;\r\n\t\t}\r\n\t\tgenCount=0;\r\n\t}\r\n\tprivate void createAliens() {\r\n\t\tif(waitingForKeyPress) return;\r\n\t\tstageRunning=true;\r\n\t\t// determine the parameters for the aliens based on the current level// increase the number of aliens by 2 for each level\r\n\t\talienCount = 10  + (level - 1) * 2;// increase the number of aliens by 2 for each level11\r\n\t\tif (level == 3) liveCount = 1;\r\n\t\telse liveCount = alienCount;\r\n\t\tint alienWidth = 50; // width of each alien\r\n\t\tint alienHeight = 30; // height of each alien\r\n\t\tint minY = 10; // minimum y-coordinate\r\n\t\tint maxY = 200; // maximum y-coordinate\r\n\t\tfinal Set<Point> points = new HashSet<>(); // set to keep track of the generated points\r\n\t\tRandom random = new Random();\r\n\t\twhile (points.size() < alienCount) {\r\n\t\t\tint x = random.nextInt(getWidth() - alienWidth);\r\n\t\t\tint y = random.nextInt(maxY - minY) + minY;\r\n\t\t\t// check if the new point overlaps with any existing points\r\n\t\t\tboolean overlapping = false;\r\n\t\t\tif(level == 3){break;}\r\n\t\t\tfor (Point point : points) {\r\n\t\t\t\tif (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {\r\n\t\t\t\t\toverlapping = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// if not overlapping, add the new point to the set\r\n\t\t\tif (!overlapping) {\r\n\t\t\t\tpoints.add(new Point(x, y));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// create a timer to add aliens every delay milliseconds\r\n\t\tif (level == 1) {\r\n\t\t\tSystem.out.println(\"level 1 intro\");\r\n\t\t\tif (isGameStart) {\r\n\t\t\t\t/**\r\n\t\t\t\t * this section is added by jgs\r\n\t\t\t\t * */\r\n\t\t\t\t//initTime = lastLoopTime;\r\n\t\t\t\t//aMinute = 0;\r\n\t\t\t\t//aSecond = 0;\r\n\t\t\t\t//tenToHundMillis = 0;\r\n\t\t\t\t//goGo = true;\r\n\t\t\t}\r\n\t\t\tstageRunning = true;\r\n\t\t\tTimer timerLv1 = new Timer();\r\n\t\t\tTimerTask taskLv1 = new TimerTask() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tif (waitingForKeyPress) return;\r\n\t\t\t\t\tif (genCount < alienCount) {\r\n\t\t\t\t\t\tPoint[] pointArray = points.toArray(new Point[0]);\r\n\t\t\t\t\t\tPoint randomPoint = pointArray[genCount];\r\n\t\t\t\t\t\tint x = randomPoint.x;\r\n\t\t\t\t\t\tint y = randomPoint.y;\r\n\t\t\t\t\t\tAlienEntity alien = new AlienEntity(Game.this, x, y);\r\n\t\t\t\t\t\talien.createLevel1Alien(Game.this, x, y);\r\n\t\t\t\t\t\taddEntity(alien);\r\n\t\t\t\t\t\tSystem.out.println(\"level 1 spawned: \" + (genCount + 1));\r\n\t\t\t\t\t\t++genCount;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tSystem.out.println(\"Lv1 All Spawned\");\r\n\t\t\t\t\t\ttimerLv1.cancel();\r\n\t\t\t\t\t\tgenCount = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttimerLv1.schedule(taskLv1, 0, 1000);\r\n\t\t}\r\n\t\telse if (level == 2){\r\n\t\t\tSystem.out.println(\"level 2 intro\");\r\n\t\t\tstageRunning = true;\r\n\t\t\tgenCount = 0;\r\n\r\n\t\t\tTimer timerLv2 = new Timer();\r\n\t\t\tTimerTask taskLv2 = new TimerTask() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tif (waitingForKeyPress) return;\r\n\t\t\t\t\tif (genCount < alienCount) {\r\n\t\t\t\t\t\tPoint[] pointArray = points.toArray(new Point[0]);\r\n\t\t\t\t\t\tPoint randomPoint = pointArray[genCount];\r\n\t\t\t\t\t\tint x = randomPoint.x;\r\n\t\t\t\t\t\tint y = randomPoint.y;\r\n\t\t\t\t\t\tAlienEntity alien = new AlienEntity(Game.this, x, y);\r\n\t\t\t\t\t\talien.createLevel2Alien(Game.this, x, y);\r\n\t\t\t\t\t\taddEntity(alien);\r\n\t\t\t\t\t\tSystem.out.println(\"level 1 spawned: \" + (genCount + 1));\r\n\t\t\t\t\t\t++genCount;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tSystem.out.println(\"Lv1 All Spawned\");\r\n\t\t\t\t\t\ttimerLv2.cancel();\r\n\t\t\t\t\t\tgenCount = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttimerLv2.schedule(taskLv2, 0, 1000);\r\n\t\t}\r\n\t\telse if (level == 3) {\r\n\t\t\tSystem.out.println(\"level 3 intro\");\r\n\t\t\tif(waitingForKeyPress)return;\r\n\t\t\tstageRunning = true;\r\n\t\t\tBossEntity boss = new BossEntity(this, \"sprites/boss2.png\", getWidth() / 2, 50);\r\n\t\t\tentities.add(boss);\r\n\t\t}\r\n\t}\r\n\tpublic void updateLogic() {\r\n\t\tlogicRequiredThisLoop = true;\r\n\t}\r\n\t/**\r\n\t * Remove an entity from the game. The entity removed will\r\n\t * no longer move or be drawn.\r\n\t *\r\n\t * @param entity The entity that should be removed\r\n\t */\r\n\tpublic void removeEntity(Entity entity) {\r\n\t\tremoveList.add(entity);\r\n\t}\r\n\t/** This can help you to access entities.add() in other class */\r\n\tpublic void addEntity(Entity entity){ entities.add(entity); }\r\n\r\n\t/**\r\n\t * Notification that the player has died.\r\n\t */\r\n\tpublic void notifyDeath(int status) {\r\n\t\tif(status == 1) {((ShipEntity)ShipCounter[0]).playerDead(); }\r\n\t\tif(status == 2) {((ShipEntity)ShipCounter[1]).playerDead(); }\r\n\t\tif(multiPlay){\r\n\t\t\tif (((ShipEntity)ShipCounter[0]).isDead() && ((ShipEntity)ShipCounter[1]).isDead()) notifyRetire();\r\n\t\t} else notifyRetire();\r\n\t}\r\n\r\n\tpublic void notifyRetire(){\r\n\t\tif (playBoard.getScore()> Integer.parseInt(globalStorage.getUserBestScore())) {\r\n\t\t\tmessage = \"Oh no!, but  New best score!\";\r\n\t\t\tresultSender(Integer.toString(playBoard.getScore()));\r\n\t\t\tkillCount = 0;\r\n\t\t\tplayBoard.scoreInit();\r\n\t\t}\r\n\t\telse{\r\n\t\t\tmessage = \"Oh no! They got you, try again?\";\r\n\t\t\twaitingForKeyPress = true;\r\n\t\t\tisGameStart = false;\r\n\t\t\trepeatGame();\r\n\t\t\tkillCount=0;\r\n\t\t\tplayBoard.scoreInit();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Notification that the player has won since all the aliens\r\n\t * are dead.\r\n\t */\r\n\tpublic void notifyWin() {\r\n\t\tmessage = \"Well done! You Win!\";\r\n\t\tlevel++;\r\n\t\tmessage = \"level\" + level;\r\n\t\twaitingForKeyPress = true;\r\n\t\tisGameStart = false;\r\n\t\tstageRunning = false;\r\n\t\tif (level == 4) level = 1;\r\n\t}\r\n\tpublic void resultSender(String result){\r\n\t\tfirebaseTool.setUserBestScore(globalStorage.getUserID(), result);\r\n\t\tglobalStorage.setUserBestScore(result); // 베스트 스코어 업데이트\r\n\t}\r\n\tpublic void itemDrop(int x, int y){\r\n\t\tif (killCount%3 == 0 && killCount/3 >= 1){\r\n\t\t\taddEntity(new ItemEntity(this,\"sprites/itemBox.png\",x,y));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic void notifyAlienKilled(Entity other, int score) {\r\n\t\t// reduce the alient count, if there are none left, the player has won!\r\n\t\t++killCount;\r\n\t\t--liveCount;\r\n\t\tplayBoard.scoreModeAdd(score);\r\n\t\titemDrop(other.getX(), other.getY());\r\n\t\tSystem.out.println(killCount);\r\n\t\tif (level == 1) {\r\n\t\t\tif (liveCount == 0) {\r\n\t\t\t\tnotifyWin();\r\n\t\t\t}\r\n\t\t} else if (level == 2) {\r\n\t\t\tif(alienCount%2 == 0){\r\n\t\t\t\tlevel2shot();\r\n\t\t\t}\r\n\t\t\tif (liveCount == 0) {\r\n\t\t\t\tnotifyWin();\r\n\t\t\t}\r\n\t\t} else if (level == 3) {\r\n\r\n\r\n\t\t\tif (liveCount == 0) {\r\n\t\t\t\tnotifyWin();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Attempt to fire a shot from the player. Its called \"try\"\r\n\t * since we must first check that the player can fire at this\r\n\t * point, i.e. has he/she waited long enough between shots\r\n\t */\r\n\tpublic void tryToFire() {\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[0];\r\n\t\tif (ship.isDead()) return;\r\n\t\t// check that we have waiting long enough to fire\r\n\t\tif (System.currentTimeMillis() - ship.getFireTime() < ship.getFireRatio()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\tship.setFireTime(System.currentTimeMillis());\r\n\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.png\",ShipCounter[0].getX()+10,ShipCounter[0].getY()-30);\r\n\t\tentities.add(shot);\r\n\t\tExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\t\tBackgroundMusic ss = new BackgroundMusic(\"src/main/resources/audio/shot.wav\", executorService);\r\n\t\texecutorService.execute(ss);\r\n\r\n\t}\r\n\tpublic void level2shot(){\r\n\r\n\t\tint randomX = new Random().nextInt(600); // 0부터 599까지의 랜덤한 x좌표 생성\r\n\t\tAttackEntity level2Shot = new AttackEntity(this, \"sprites/shot.gif\", randomX, 100);\r\n\t\tentities.add(level2Shot);\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t\tpublic void tryToFire2() {\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[1];\r\n\t\tif (ship.isDead()) return;\r\n\t\t// check that we have waiting long enough to fire\r\n\t\tif (System.currentTimeMillis() - ship.getFireTime() < ship.getFireRatio()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\tship.setFireTime(System.currentTimeMillis());\r\n\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.gif\",ShipCounter[1].getX()+10,ShipCounter[1].getY()-30);\r\n\t\tentities.add(shot);\r\n\r\n\t\tExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\t\tBackgroundMusic ss = new BackgroundMusic(\"src/main/resources/audio/shot.wav\", executorService);\r\n\t\texecutorService.execute(ss);\r\n\t}\r\n\t/**\r\n\t * The main game loop. This loop is running during all game\r\n\t * play as is responsible for the following activities:\r\n\t * <p>\r\n\t * - Working out the speed of the game loop to update moves\r\n\t * - Moving the game entities\r\n\t * - Drawing the screen contents (entities, text)\r\n\t * - Updating game events\r\n\t * - Checking Input\r\n\t * <p>\r\n\t */\r\n\tpublic void gameLoop() {\r\n\t\tlastLoopTime = SystemTimer.getTime();\r\n\t\t// keep looping round til the game ends\r\n\t\twhile (gameRunning) {\r\n\t\t\t// work out how long its been since the last update, this\r\n\t\t\t// will be used to calculate how far the entities should\r\n\t\t\t// move this loop\r\n\t\t\tlong delta = SystemTimer.getTime() - lastLoopTime;\r\n\t\t\t//lastLoopTime = SystemTimer.getTime();\r\n\t\t\tlastLoopTime = SystemTimer.getTime();\r\n\t\t   /*System.out.format(\"%02d\", aMinute); System.out.print(':');\r\n\t\tSystem.out.format(\"%02d\", aSecond); System.out.print('.');\r\n\t\tSystem.out.format(\"%02d%n\", tenToHundMillis);*/\r\n\t\t\t/**\r\n\t\t\t * delta could be a second, lastLooptime is 1ms. And its count up about 10ms.\r\n\t\t\t * so we will use this class to get a live time ticks up from down 4 numbers of digits\r\n\t\t\t * */\r\n\t\t\t//System.out.println(delta+\", \"+lastLoopTime);\r\n\t\t\t// update the frame counter\r\n\t\t\tlastFpsTime += delta;\r\n\t\t\tfps++;\r\n\t\t\t// update our FPS counter if a second has passed since\r\n\t\t\t// we last recorded\r\n\t\t\tif (lastFpsTime >= 1000) {\r\n\t\t\t\tcontainer.setTitle(windowTitle+\" (FPS: \"+fps+\")\");\r\n\t\t\t\tlastFpsTime = 0;\r\n\t\t\t\tfps = 0;\r\n\t\t\t}\r\n\t\t\t// Get hold of a graphics context for the accelerated\r\n\t\t\t// surface and blank it out\r\n\t\t\tGraphics2D g = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tg.setColor(Color.black);\r\n\t\t\tg.fillRect(0,0,800,600);\r\n\t\t\t//Status HUD\r\n\t\t\tGraphics2D userHUD = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tuserHUD.setColor(Color.white);\r\n\t\t\tuserHUD.drawString(\"Score : \"+playBoard.getScore(),(800-g.getFontMetrics().stringWidth(\"Score : \"+killCount))/2,20);\r\n\t\t\t/*userHUD.drawString(timeStamp,5,580);*/\r\n\t\t\t// cycle round asking each entity to move itself\r\n\t\t\tif (!stageRunning)createAliens();\r\n\t\t\tif (!waitingForKeyPress) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\t\tentity.move(delta);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// cycle round drawing all the entities we have in the game\r\n\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\tentity.draw(g);\r\n\t\t\t}\r\n\t\t\t// brute force collisions, compare every entity against\r\n\t\t\t// every other entity. If any of them collide notify\r\n\t\t\t// both entities that the collision has occured\r\n\t\t\tfor (int p=0;p<entities.size();p++) {\r\n\t\t\t\tfor (int s=p+1;s<entities.size();s++) {\r\n\t\t\t\t\tEntity me = (Entity) entities.get(p);\r\n\t\t\t\t\tEntity him = (Entity) entities.get(s);\r\n\t\t\t\t\tif (me.collidesWith(him)) {\r\n\t\t\t\t\t\tme.collidedWith(him);\r\n\t\t\t\t\t\thim.collidedWith(me);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// remove any entity that has been marked for clear up\r\n\t\t\tentities.removeAll(removeList);\r\n\t\t\tremoveList.clear();\r\n\t\t\t// if a game event has indicated that game logic should\r\n\t\t\t// be resolved, cycle round every entity requesting that\r\n\t\t\t// their personal logic should be considered.\r\n\t\t\tif (logicRequiredThisLoop) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = entities.get(i);\r\n\t\t\t\t\tentity.doLogic();\r\n\t\t\t\t}\r\n\t\t\t\tlogicRequiredThisLoop = false;\r\n\t\t\t}\r\n\t\t\t// if we're waiting for an \"any key\" press then draw the\r\n\t\t\t// current message\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tg.setColor(Color.white);\r\n\t\t\t\tg.drawString(message,(800-g.getFontMetrics().stringWidth(message))/2,250);\r\n\t\t\t\tg.drawString(\"Press any key\",(800-g.getFontMetrics().stringWidth(\"Press any key\"))/2,300);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tisGameStart = true;\r\n\t\t\t}\r\n\t\t\t//timeCalc();\r\n\t\t\t// finally, we've completed drawing so clear up the graphics\r\n\t\t\t// and flip the buffer over\r\n\t\t\t//g.dispose();\r\n\t\t\tstrategy.show();\r\n\t\t\t// resolve the movement of the ship. First assume the ship\r\n\t\t\t// isn't moving. If either cursor key is pressed then\r\n\t\t\t// update the movement appropraitely\r\n\t\t\t//1P Controlb\r\n\t\t\tshipControl1();\r\n\t\t\t//2P control\r\n\t\t\tshipControl2();\r\n\t\t\t// if we're pressing fire, attempt to fire\r\n\t\t\tif (firePressed) {\r\n\t\t\t\ttryToFire();\r\n\t\t\t}\r\n\t\t\tif (fire2Pressed){\r\n\t\t\t\tif(!multiPlay)return;\r\n\t\t\t\ttryToFire2();\r\n\t\t\t}\r\n\t\t\t// we want each frame to take 10 milliseconds, to do this\r\n\t\t\t// we've recorded when we started the frame. We add 10 milliseconds\r\n\t\t\t// to this and then factor in the current time to give\r\n\t\t\t// us our final value to wait for\r\n\t\t\tSystemTimer.sleep(lastLoopTime+10-SystemTimer.getTime());\r\n\r\n\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * The main game loop. This loop is running during all game\r\n\t * play as is responsible for the following activities:\r\n\t * <p>\r\n\t * - Working out the speed of the game loop to update moves\r\n\t * - Moving the game entities\r\n\t * - Drawing the screen contents (entities, text)\r\n\t * - Updating game events\r\n\t * - Checking Input\r\n\t * <p>\r\n\t */\r\n\r\n\t/*public String giveSurvivalTime() {\r\n\t\treturn String.format(\"%02d\", aMinute) + \":\" + String.format(\"%02d\", aSecond) + \".\" + String.format(\"%02d\", tenToHundMillis);\r\n\t}*/\r\n\t/**\r\n\t * A class to handle keyboard input from the user. The class\r\n\t * handles both dynamic input during game play, i.e. left/right\r\n\t * and shoot, and more static type input (i.e. press any key to\r\n\t * continue)\r\n\t *\r\n\t * This has been implemented as an inner class more through\r\n\t * habbit then anything else. Its perfectly normal to implement\r\n\t * this as seperate class if slight less convienient.\r\n\t *\r\n\t * @author Kevin Glass\r\n\t */\r\n\tprivate class KeyInputHandler extends KeyAdapter {\r\n\t\t/**\r\n\t\t * The number of key presses we've had while waiting for an \"any key\" press\r\n\t\t */\r\n\t\tprivate int pressCount = 1;\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been pressed. Note that\r\n\t\t * a key being pressed is equal to being pushed down but *NOT*\r\n\t\t * released. Thats where keyTyped() comes in.\r\n\t\t *\r\n\t\t * @param e The details of the key that was pressed\r\n\t\t */\r\n\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"press\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP) {\r\n\t\t\t\tupPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_DOWN) {\r\n\t\t\t\tdownPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_A) {\r\n\t\t\t\tleft2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_D) {\r\n\t\t\t\tright2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_W) {\r\n\t\t\t\tup2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_S) {\r\n\t\t\t\tdown2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_1) {\r\n\t\t\t\tfire2Pressed = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been released.\r\n\t\t *\r\n\t\t * @param e The details of the key that was released\r\n\t\t */\r\n\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"released\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP) {\r\n\t\t\t\tupPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_DOWN) {\r\n\t\t\t\tdownPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_A) {\r\n\t\t\t\tleft2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_D) {\r\n\t\t\t\tright2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_W) {\r\n\t\t\t\tup2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_S) {\r\n\t\t\t\tdown2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_1) {\r\n\t\t\t\tfire2Pressed = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been typed. Note that\r\n\t\t * typing a key means to both press and then release it.\r\n\t\t *\r\n\t\t * @param e The details of the key that was typed.\r\n\t\t */\r\n\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t// if we're waiting for a \"any key\" type then\r\n\t\t\t// check if we've recieved any recently. We may\r\n\t\t\t// have had a keyType() event from the user releasing\r\n\t\t\t// the shoot or move keys, hence the use of the \"pressCount\"\r\n\t\t\t// counter.\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tif (pressCount == 1) {\r\n\t\t\t\t\t// since we've now recieved our key typed\r\n\t\t\t\t\t// event we can mark it as such and start\r\n\t\t\t\t\t// our new game\r\n\t\t\t\t\twaitingForKeyPress = false;\r\n\t\t\t\t\tstartGame();\r\n\t\t\t\t\tpressCount = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpressCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if we hit escape, then quit the game\r\n\t\t\tif (e.getKeyChar() == 27) {\r\n\t\t\t\tSystem.exit(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic void keyReverse(boolean whois) {\r\n\t\tTimer timerKeyReverse = new Timer();\r\n\t\tTimerTask task = new TimerTask() {\r\n\t\t\tlong startTime = System.currentTimeMillis();\r\n\t\t\tlong durationtime = System.currentTimeMillis();\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\twhile(durationtime - startTime<5000){\r\n\t\t\t\t\tif(whois)keyP2Reverse=true;\r\n\t\t\t\t\telse keyP1Reverse=true;\r\n\t\t\t\t\tdurationtime = System.currentTimeMillis();\r\n\t\t\t\t}\r\n\t\t\t\ttimerKeyReverse.cancel();\r\n\t\t\t\tif (whois) keyP2Reverse = false;\r\n\t\t\t\telse keyP1Reverse =false;\r\n\t\t\t}\r\n\t\t};\r\n\t\ttimerKeyReverse.schedule(task, 0,10);\r\n\t}\r\n\tpublic void shipControl1() {\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[0];\r\n\t\tif(keyP1Reverse){\r\n\t\t\tLonly = 3; Ronly = 9; Uonly = 6; Donly = 12; LnD = 1; RnD = 11; LnU = 5; RnU = 7;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tLonly = 9; Ronly = 3; Uonly = 12; Donly = 6; LnU = 11; LnD = 7; RnU = 1; RnD = 5;\r\n\t\t}\r\n\t\tif (leftPressed && !rightPressed && !upPressed && !downPressed) ship.movingLogic(Lonly);\r\n\t\t\t//right unique move\r\n\t\telse if (rightPressed && !leftPressed && !upPressed && !downPressed) ship.movingLogic(Ronly);\r\n\t\t\t//up unique move\r\n\t\telse if (upPressed && !downPressed && !rightPressed && !leftPressed) ship.movingLogic(Uonly);\r\n\t\t\t//down unique move\r\n\t\telse if (downPressed && !upPressed && !rightPressed && !leftPressed) ship.movingLogic(Donly);\r\n\t\t\t//left&up degree 45\r\n\t\telse if (leftPressed && upPressed && !rightPressed && !downPressed) ship.movingLogic(LnU);\r\n\t\telse if (leftPressed && downPressed && !rightPressed && !upPressed) ship.movingLogic(LnD);\r\n\t\telse if (rightPressed && upPressed && !downPressed && !leftPressed) ship.movingLogic(RnU);\r\n\t\telse if (rightPressed && downPressed && !upPressed && !leftPressed) ship.movingLogic(RnD);\r\n\t\telse ship.movingLogic(0);\r\n\t}\r\n\tpublic int getAlienHoriSpeed(){\r\n\t\treturn alienHoriSpeed;\r\n\t}\r\n\tpublic void setAlienHoriSpeed(int Tgt){\r\n\t\talienHoriSpeed=Tgt;\r\n\t}\r\n\tpublic int getAlienVertSpeed(){\r\n\t\treturn alienVertSpeed;\r\n\t}\r\n\tpublic void setAlienVertSpeed(int Tgt){\r\n\t\talienVertSpeed=Tgt;\r\n\t}\r\n\tpublic void alienInvasion() {\r\n\t\tint originHoriSpeed = getAlienHoriSpeed();\r\n\t\tint originVertSpeed = getAlienVertSpeed();\r\n\t\tlong startTimer = SystemTimer.getTime();\r\n\t\tTimer timerInvasion = new Timer();\r\n\t\tint targetHoriSpeed = originHoriSpeed * 2;\r\n\t\tint targetVertSpeed = originVertSpeed * 2;\r\n\t\tTimerTask taskInvasion = new TimerTask() {\r\n\r\n\t\t\tlong durationTimer = SystemTimer.getTime();\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\twhile (durationTimer - startTimer < 5000) {\r\n\t\t\t\t\tsetAlienVertSpeed(targetHoriSpeed);\r\n\t\t\t\t\tsetAlienVertSpeed(targetVertSpeed);\r\n\t\t\t\t\tdurationTimer = SystemTimer.getTime();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\ttimerInvasion.schedule(taskInvasion, 0,500);\r\n\t\tsetAlienVertSpeed(originHoriSpeed);\r\n\t\tsetAlienVertSpeed(originVertSpeed);\r\n\t}\r\n\tpublic void shipControl2() {\r\n\t\tif(!multiPlay)return;\r\n\t\tif(keyP2Reverse){\r\n\t\t\tLonly = 3; Ronly = 9; Uonly = 6; Donly = 12; LnD = 1; RnD = 11; LnU = 5; RnU = 7;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tLonly = 9; Ronly = 3; Uonly = 12; Donly = 6; LnU = 11; LnD = 7; RnU = 1; RnD = 5;\r\n\t\t}\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[1];\r\n\t\tif (left2Pressed && !right2Pressed && !up2Pressed && !down2Pressed) ship.movingLogic(Lonly);\r\n\t\t\t//right unique move\r\n\t\telse if (right2Pressed && !left2Pressed && !up2Pressed && !down2Pressed) ship.movingLogic(Ronly);\r\n\t\t\t//up unique move\r\n\t\telse if (up2Pressed && !down2Pressed && !right2Pressed && !left2Pressed) ship.movingLogic(Uonly);\r\n\t\t\t//down unique move\r\n\t\telse if (down2Pressed && !up2Pressed && !right2Pressed && !left2Pressed) ship.movingLogic(Donly);\r\n\t\t\t//left&up degree 45\r\n\t\telse if (left2Pressed && up2Pressed && !right2Pressed && !down2Pressed) ship.movingLogic(LnU);\r\n\t\telse if (left2Pressed && down2Pressed && !right2Pressed && !up2Pressed) ship.movingLogic(LnD);\r\n\t\telse if (right2Pressed && up2Pressed && !down2Pressed && !left2Pressed) ship.movingLogic(RnU);\r\n\t\telse if (right2Pressed && down2Pressed && !up2Pressed && !left2Pressed) ship.movingLogic(RnD);\r\n\t\telse ship.movingLogic(0);\r\n\t}\r\n\t/*public static void main(String[] args) {\r\n\t\tGame g = new Game(\"1p\");\r\n\t\tg.gameLoop();\r\n\t}*/\r\n\t//추후 사용할 경우 재정비 필요. 현재 화면 HUD불가.\r\n\t/**public void timeCalc(){//time is spent even not started\r\n\t if(goGo==false)return;\r\n\t else if(player1Dead && player2Dead)return;\r\n\t tenToHundMillis = (int) ((lastLoopTime - initTime) / 10 % 100);//default time duration\r\n\t aSecond = (int) lastLoopTime / 1000 % 60;\r\n\t aMinute = (int) lastLoopTime / 60000 % 60;\r\n\r\n\t timeStamp = String.format(\"%02d\", aMinute) + \":\" + String.format(\"%02d\", aSecond) + \".\" + String.format(\"%02d\", tenToHundMillis);*/\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/spaceinvaders/Game.java b/src/main/java/spaceinvaders/Game.java
--- a/src/main/java/spaceinvaders/Game.java	(revision 74179aa1aea481a61484f3ae085c904fb94474b6)
+++ b/src/main/java/spaceinvaders/Game.java	(date 1685278906624)
@@ -94,7 +94,7 @@
 	/** timedisplay */
 	private String timeStamp="";
 	private long lastLoopTime; private long initTime;
-	private RecordRecorder playBoard = new RecordRecorder(this);
+	private  RecordRecorder playBoard = new RecordRecorder(this);
 
 	private static int alienVertSpeed=10, alienHoriSpeed=75;
 	private JLabel backLabel;
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21__9_41__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21__9_41__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21__9_41__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21__9_41__Changes_.xml	(revision 74179aa1aea481a61484f3ae085c904fb94474b6)
+++ /dev/null	(revision 74179aa1aea481a61484f3ae085c904fb94474b6)
@@ -1,44 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]" date="1684673059543" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-05-21 오후 9:41 [Changes]" />
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/spaceinvaders/Game$2.class" />
-    <option name="AFTER_PATH" value="target/classes/spaceinvaders/Game$2.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/Game$2.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/com/intellij/uiDesigner/core/GridConstraints.class" />
-    <option name="AFTER_PATH" value="target/classes/com/intellij/uiDesigner/core/GridConstraints.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/GridConstraints.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/spaceinvaders/Game$KeyInputHandler.class" />
-    <option name="AFTER_PATH" value="target/classes/spaceinvaders/Game$KeyInputHandler.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/Game$KeyInputHandler.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/spaceinvaders/Mypage.class" />
-    <option name="AFTER_PATH" value="target/classes/spaceinvaders/Mypage.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/Mypage.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/spaceinvaders/BackgroundMusic.class" />
-    <option name="AFTER_PATH" value="target/classes/spaceinvaders/BackgroundMusic.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/BackgroundMusic.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/spaceinvaders/Game$3.class" />
-    <option name="AFTER_PATH" value="target/classes/spaceinvaders/Game$3.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/Game$3.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/spaceinvaders/Game.class" />
-    <option name="AFTER_PATH" value="target/classes/spaceinvaders/Game.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/Game.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="target/classes/spaceinvaders/entity/ShipEntity.class" />
-    <option name="AFTER_PATH" value="target/classes/spaceinvaders/entity/ShipEntity.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/ShipEntity.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-05-21_오후_9_41_[Changes]/shelved.patch	(revision 74179aa1aea481a61484f3ae085c904fb94474b6)
+++ /dev/null	(revision 74179aa1aea481a61484f3ae085c904fb94474b6)
@@ -1,66 +0,0 @@
-Index: src/main/java/spaceinvaders/Game.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package spaceinvaders;\r\n\r\nimport com.google.firebase.database.*;\r\nimport com.google.firebase.internal.NonNull;\r\nimport spaceinvaders.entity.*;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.Timer;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferStrategy;\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.Random;\r\nimport java.util.Set;\r\nimport java.util.*;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\nimport javax.sound.sampled.AudioInputStream;\r\nimport javax.sound.sampled.AudioSystem;\r\nimport javax.sound.sampled.Clip;\r\nimport javax.sound.sampled.FloatControl;\r\nimport javax.swing.*;\r\n\r\n\r\n/**\r\n * The main hook of our game. This class with both act as a manager\r\n * for the display and central mediator for the game logic.\r\n *\r\n * Display management will consist of a loop that cycles round all\r\n * entities in the game asking them to move and then drawing them\r\n * in the appropriate place. With the help of an inner class it\r\n * will also allow the player to control the main ship.\r\n *\r\n * As a mediator it will be informed when entities within our game\r\n * detect events (e.g. alient killed, played died) and will take\r\n * appropriate game actions.\r\n *\r\n * @author Kevin Glass\r\n */\r\npublic class Game extends Canvas {\r\n\t/**\r\n\t * The stragey that allows us to use accelerate page flipping\r\n\t */\r\n\tprivate final BufferStrategy strategy;\r\n\t/**\r\n\t * True if the game is currently \"running\", i.e. the game loop is looping\r\n\t */\r\n\tprivate final boolean gameRunning = true;\r\n\t/**\r\n\t * The list of all the entities that exist in our game\r\n\t */\r\n\tprivate final ArrayList<Entity> entities = new ArrayList<>();\r\n\t/**\r\n\t * The list of entities that need to be removed from the game this loop\r\n\t */\r\n\tprivate final ArrayList<Entity> removeList = new ArrayList<Entity>();\r\n\t/** The number of aliens left on the screen */\r\n\tprivate int alienCount;\r\n\t/** The message to display which waiting for a key press */\r\n\tprivate String message = \"\";\r\n\t/** True if we're holding up game play until a key has been pressed */\r\n\tprivate boolean waitingForKeyPress = true;\r\n\t/** True if the left cursor key is currently pressed */\r\n\tprivate Entity[] ShipCounter = new ShipEntity[2]; private boolean multiPlay, loopMode;\r\n\tprivate boolean leftPressed; private boolean left2Pressed;\r\n\tprivate boolean rightPressed; private boolean right2Pressed;\r\n\tprivate boolean upPressed; private boolean up2Pressed;\r\n\tprivate boolean downPressed; private boolean down2Pressed;\r\n\tprivate boolean firePressed; private boolean fire2Pressed;\r\n\tprivate boolean player1Dead, player2Dead;\t\t\tprivate boolean goGo = false;\r\n\tprivate long lastFire = 0; private long last2Fire = 0;\r\n\tprivate long level2lastFire = 0; private long level2ShotInterval = 0;\r\n\tprivate long bossfire= 0; private long bossShotInterval= 0;\r\n\tprivate long firingInterval = 500; private long firing2Interval = 500;\r\n\t/** True if game logic needs to be applied this loop, normally as a result of a game event */\r\n\tprivate boolean logicRequiredThisLoop = false;\r\n\tprivate boolean isGameStart = false;\r\n\t/**\r\n\t * The last time at which we recorded the frame rate\r\n\t */\r\n\tprivate long lastFpsTime;\r\n\t/**\r\n\t * The current number of frames recorded\r\n\t */\r\n\tprivate int fps, cycle;\r\n\t/**\r\n\t * The normal title of the game window\r\n\t */\r\n\tprivate final String windowTitle = \"Space Invaders 102\";\r\n\t/**\r\n\t * The game window that we'll update with the frame count\r\n\t */\r\n\tprivate final JFrame container;\r\n\tprivate Thread timeCounterThread;\r\n\tprivate int level = 1;\r\n\tprivate Timer timer;\r\n\tprivate int killCount;\r\n\tprivate static User User;\r\n\tprivate static String bestScore = \"\";\r\n\tprivate FirebaseTool firebaseTool;\r\n\r\n\tprivate GlobalStorage globalStorage;\r\n\r\n\tprivate JLabel backgroundMap;\r\n\r\n\tprivate Clip clip;\r\n\r\n\t//Record Variables\r\n\tprivate int tenToHundMillis, aSecond, aMinute;\r\n\t/** timedisplay */\r\n\tprivate String timeStamp=\"\";\r\n\tprivate long lastLoopTime; private long initTime;\r\n\tprivate RecordRecorder playBoard = new RecordRecorder(this);\r\n\r\n\tprivate int levelSpeedControl=75;\r\n\tprivate JLabel backLabel;\r\n\r\n\t/**\r\n\t * Construct our game and set it running.\r\n\t */\r\n\tpublic Game(String option) {\r\n\t\tcycle = 0;\r\n\t\tif (option.equals(\"2p\")) multiPlay = true;\r\n\t\telse if (option.equals(\"1p\")) multiPlay = false;\r\n\t\telse if (option.equals(\"loopMode\")) {multiPlay =false; loopMode = true;}\r\n\t\t// create a frame to contain our game\r\n\t\tcontainer = new JFrame(\"Space Invaders 102\");\r\n\t\t// get hold the content of the frame and set up the resolution of the game\r\n\t\tJPanel panel = (JPanel) container.getContentPane();\r\n\t\tpanel.setPreferredSize(new Dimension(800,600));\r\n\t\tpanel.setLayout(null);\r\n\r\n\t\t// Add background image\r\n\t\tImageIcon backgroundImage = new ImageIcon(\"sprites/rankingPage.png\");\r\n\t\tJLabel background = new JLabel(backgroundImage);\r\n\t\tcontainer.add(background,BorderLayout.CENTER);\r\n\r\n\r\n\r\n\t\t/*TimeCounter timeCounter = new TimeCounter((int) 0);*/\r\n\t\t//panel.add(timeCounter);\r\n\t\t// setup our canvas size and put it into the content of the frame\r\n\t\tsetBounds(0,0,800,600);\r\n\t\tpanel.add(this);\r\n\t\t// TimeCounter 객체를 실행하는 Thread를 생성하고 시작합니다.\r\n\t\t/*timeCounterThread = new Thread(timeCounter);\r\n\t\ttimeCounterThread.start();*/\r\n\t\t// Tell AWT not to bother repainting our canvas since we're\r\n\t\t// going to do that our self in accelerated mode\r\n\t\tsetIgnoreRepaint(true);\r\n\t\t// finally make the window visible\r\n\t\tcontainer.pack();\r\n\t\tcontainer.setResizable(false);\r\n\t\tcontainer.setVisible(true);\r\n\r\n\t\t// add a listener to respond to the user closing the window. If they\r\n\t\t// do we'd like to exit the game\r\n\t\tcontainer.addWindowListener(new WindowAdapter() {\r\n\t\t\tpublic void windowClosing(WindowEvent e) {\r\n\t\t\t\tSystem.exit(0);\r\n\t\t\t}\r\n\t\t});\r\n\t\t// add a key input system (defined below) to our canvas\r\n\t\t// so we can respond to key pressed\r\n\t\taddKeyListener(new KeyInputHandler());\r\n\t\t// request the focus so key events come to us\r\n\t\trequestFocus();\r\n\t\t// create the buffering strategy which will allow AWT\r\n\t\t// to manage our accelerated graphics\r\n\t\tcreateBufferStrategy(2);\r\n\t\tstrategy = getBufferStrategy();\r\n\r\n\t\t// initialise the entities in our game so there's something\r\n\t\t// to see at startup\r\n\t\tif (option.equals(\"2p\")) {\r\n\t\t\tSystem.out.println(\"2p\");\r\n\t\t}\r\n\r\n\r\n\r\n\t\tfirebaseTool = FirebaseTool.getInstance();\r\n\t\tglobalStorage = GlobalStorage.getInstance();\r\n\r\n\t\tinitEntities();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Start a fresh game, this should clear out any old data and\r\n\t * create a new set.\r\n\t */\r\n\tprivate void startGame() {\r\n\r\n\r\n\t\t// clear out any existing entities and intialise a new set\r\n\t\tentities.clear();\r\n\t\tinitEntities();\r\n\r\n\t\t// blank out any keyboard settings we might currently have\r\n\t\tleftPressed = false;\r\n\t\trightPressed = false;\r\n\t\tupPressed = false;\r\n\t\tdownPressed = false;\r\n\t\tfirePressed = false;\r\n\t\tplayer1Dead = false;\r\n\r\n\t\t//2P key init\r\n\t\tleft2Pressed = false;\r\n\t\tright2Pressed = false;\r\n\t\tup2Pressed = false;\r\n\t\tdown2Pressed = false;\r\n\t\tfire2Pressed = false;\r\n\t\tplayer2Dead = false;\r\n\t\ttenToHundMillis=0; aSecond=0; aMinute=0;\r\n\t\t//윈도우랑 게임창 노래 겹쳐들림\r\n//\t\tnew BackgroundMusic();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initialise the starting state of the entities (ship and aliens). Each\r\n\t * entitiy will be added to the overall list of entities in the game.\r\n\t */\r\n//\tprivate void initEntities() {\r\n//\t\t// create the player ship and place it roughly in the center of the screen\r\n//\t\tship = new ShipEntity(this, \"sprites/ship.gif\",370,550);\r\n//\t\tentities.add(ship);\r\n//\t\tentities.add(ship2);\r\n//\t\tint idx = 20;\r\n//\t\tfor (Entity Life : LifeCounter){\r\n//\t\t\tif (idx > 60) {\r\n//\t\t\t\tLife = new LifeEntity(this, 655+idx, 580);\r\n//\t\t\t\tLifeCounter[idx/20 - 1] = Life;\r\n//\t\t\t}\r\n//\t\t\telse {\r\n//\t\t\t\tLife = new LifeEntity(this, idx-15, 580);\r\n//\t\t\t\tLifeCounter[idx/20 - 1] = Life;\r\n//\t\t\t}\r\n//\t\t\tentities.add(Life);\r\n//\t\t\tidx+=20;\r\n//\t\t}\r\n//\r\n//\t\t/** 아래 함수에 int 중복선언하고 나서, 값 할당이 initGame로컬변수 취급받다보니 중괄호 범위 넘어간 이후로 값이 틀어지는것 같습니다.\r\n//\t\t *\r\n//\t\t *\r\n//\t\t *\r\n//\t\t *\r\n//\t\t * */\r\n//\t\talienCount = 3;\r\n//\r\n//\t\tint alienCount = 50; // number of aliens\r\n//\t\tint alienWidth = 50; // width of each alien\r\n//\t\tint alienHeight = 30; // height of each alien\r\n//\t\tint minY = 10; // minimum y-coordinate\r\n//\t\tint maxY = 200; // maximum y-coordinate\r\n//\t\tint delay = 1000; // time delay between each batch of aliens (in milliseconds)\r\n//\r\n//\t\tfinal Set<Point> points = new HashSet<>(); // set to keep track of the generated points\r\n//\t\tRandom random = new Random();\r\n//\r\n//\t\twhile (points.size() < alienCount) {\r\n//\t\t\tint x = random.nextInt(getWidth() - alienWidth);\r\n//\t\t\tint y = random.nextInt(maxY - minY) + minY;\r\n//\r\n//\t\t\t// check if the new point overlaps with any existing points\r\n//\t\t\tboolean overlapping = false;\r\n//\t\t\tfor (Point point : points) {\r\n//\t\t\t\tif (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {\r\n//\t\t\t\t\toverlapping = true;\r\n//\t\t\t\t\tbreak;\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n//\r\n//\t\t\t// if not overlapping, add the new point to the set\r\n//\t\t\tif (!overlapping) {\r\n\r\n\t//\t\t\t\tpoints.add(new Point(x, y));\r\n//\t\t\t}\r\n//\t\t}\r\n//\r\n//// create aliens for each generated point\r\n//\t\tfor (Point point : points) {\r\n//\t\t\tEntity alien = new AlienEntity(this, point.x, point.y);\r\n//\t\t\tentities.add(alien);\r\n//\t\t}}\r\n\tprivate void initEntities() {\r\n\t\tif (multiPlay){\r\n\t\t\tShipCounter[0] = new ShipEntity(this, \"sprites/ship1p.png\",350, 550, false);\r\n\t\t\tentities.add(ShipCounter[0]);\r\n\t\t\tShipCounter[1] = new ShipEntity(this, \"sprites/ship2p.png\",390, 550, true);\r\n\t\t\taddEntity(ShipCounter[1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tShipCounter[0] = new ShipEntity(this, \"sprites/ship2p.png\",370, 550, false);\r\n\t\t\tentities.add(ShipCounter[0]);\r\n\t\t}\r\n\t\tkillCount = 0;\r\n\r\n\t\t// create the aliens\r\n\r\n\t\tmessage =\"When you're ready, please press the button!\";\r\n\t\tcreateAliens();\r\n\r\n\t}\r\n\r\n\tprivate void createAliens() {\r\n\t\t// determine the parameters for the aliens based on the current level// increase the number of aliens by 2 for each level\r\n\t\talienCount = 10  + (level - 1) * 2;// increase the number of aliens by 2 for each level11\r\n\t\tint killCount = 0;\r\n\t\tint alienWidth = 50; // width of each alien\r\n\t\tint alienHeight = 30; // height of each alien\r\n\t\tint minY = 10; // minimum y-coordinate\r\n\t\tint maxY = 200; // maximum y-coordinate\r\n\t\tint delay = 1000; // time delay between each batch of aliens (in milliseconds)\r\n\r\n\t\t\tfinal Set<Point> points = new HashSet<>(); // set to keep track of the generated points\r\n\t\t\tRandom random = new Random();\r\n\r\n\t\t\twhile (points.size() < alienCount) {\r\n\t\t\t\tint x = random.nextInt(getWidth() - alienWidth);\r\n\t\t\t\tint y = random.nextInt(maxY - minY) + minY;\r\n\r\n\t\t\t\t// check if the new point overlaps with any existing points\r\n\t\t\t\tboolean overlapping = false;\r\n\t\t\t\tfor (Point point : points) {\r\n\t\t\t\t\tif (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {\r\n\t\t\t\t\t\toverlapping = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t// if not overlapping, add the new point to the set\r\n\t\t\tif (!overlapping) {\r\n\t\t\t\tpoints.add(new Point(x, y));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// create a timer to add aliens every delay milliseconds\r\n\t\tif (level == 1) {\r\n\t\t\ttimer = new Timer(delay, new ActionListener() {\r\n\t\t\t\tint count = 0;\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\r\n\t\t\t\t\tif (isGameStart) {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * this section is added by jgs\r\n\t\t\t\t\t\t * */\r\n\t\t\t\t\t\tinitTime=lastLoopTime;\r\n\t\t\t\t\t\taMinute=0; aSecond=0; tenToHundMillis=0;\r\n\t\t\t\t\t\tgoGo=true;\r\n\r\n\r\n\t\t\t\t\t\tif (count < alienCount) {\r\n\t\t\t\t\t\t\tPoint[] pointArray = points.toArray(new Point[0]); // convert set to array\r\n\t\t\t\t\t\t\tEntity alien = new AlienEntity(Game.this, pointArray[count].x, pointArray[count].y,getAlienSpeed());\r\n\t\t\t\t\t\t\tentities.add(alien);\r\n\t\t\t\t\t\t\tcount +=2 ; // increase count by 2 to prevent two aliens being added at once\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttimer.stop(); // stop the timer when the game is over\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (level == 2) {\r\n\r\n\t\t\ttimer = new Timer(delay, new ActionListener() {\r\n\t\t\t\tint count = 0;\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\r\n\t\t\t\t\tif (isGameStart) {\r\n\r\n\t\t\t\t\t\tif (count < alienCount) {\r\n\t\t\t\t\t\t\ttimer.setInitialDelay(1000);\r\n\t\t\t\t\t\t\ttimer.setDelay(1000);\r\n\t\t\t\t\t\t\ttimer.start();\r\n\t\t\t\t\t\t\tPoint[] pointArray = points.toArray(new Point[0]); // convert set to array\r\n\t\t\t\t\t\t\tEntity alien = new level2alienEntity(Game.this, pointArray[count].x, pointArray[count].y);\r\n\t\t\t\t\t\t\tentities.add(alien);\r\n\t\t\t\t\t\t\tcount++; // increase count by 2 to prevent two aliens being added at once\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttimer.stop(); // stop the timer when the game is over\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (level == 3) {\r\n\t\t\talienCount = 100;\r\n\t\t\tbosseEntity boss = new bosseEntity(this, \"sprites/boss2.png\", getWidth() / 2, 50);\r\n\t\t\tentities.add(boss);\r\n\t\t}\r\n\r\n\r\n\r\n\t\ttimer.setInitialDelay(1000);\r\n\t\ttimer.setDelay(1000);\r\n\t\ttimer.start();\r\n\t}\r\n\r\n\r\n\t// start timer }\r\n//             * Notification from a game entity that the logic of the game\r\n//             * should be run at the next opportunity (normally as a result of some\r\n//             * game event)\r\n//             */\r\n\r\n\t\tpublic void updateLogic() {\r\n\t\t\tlogicRequiredThisLoop = true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Remove an entity from the game. The entity removed will\r\n\t\t * no longer move or be drawn.\r\n\t\t *\r\n\t\t * @param entity The entity that should be removed\r\n\t\t */\r\n\t\tpublic void removeEntity(Entity entity) {\r\n\t\t\tremoveList.add(entity);\r\n\t\t}\r\n\r\n\t/** This can help you to access entities.add() in other class */\r\n\tpublic void addEntity(Entity entity){ entities.add(entity); }\r\n\r\n\t/**\r\n\t * Notification that the player has died.\r\n\t */\r\n\tpublic void notifyDeath(int status) {\r\n\t\tif(status == 1) {((ShipEntity)ShipCounter[0]).playerDead(); }\r\n\t\tif(status == 2) {((ShipEntity)ShipCounter[1]).playerDead(); }\r\n\t\tif(multiPlay){\r\n\t\t\tif (((ShipEntity)ShipCounter[0]).isDead() && ((ShipEntity)ShipCounter[1]).isDead()) notifyRetire();\r\n\t\t} else notifyRetire();\r\n\t}\r\n\r\n\tpublic void notifyRetire(){\r\n\t\tmessage = \"Oh no! They got you, try again?\";\r\n\t\twaitingForKeyPress = true;\r\n\t\tisGameStart = false;\r\n\t\t//for checking println\r\n\t\tplayBoard.printRecord();\r\n\t\tif (killCount > Integer.parseInt(globalStorage.getUserBestScore())) {\r\n\t\t\tmessage = \"Oh no!, but  New best score!\";\r\n\t\t\tresultSender(Integer.toString(killCount));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Notification that the player has won since all the aliens\r\n\t * are dead.\r\n\t */\r\n\tpublic void notifyWin() {\r\n\t\tmessage = \"Well done! You Win!\";\r\n\r\n\r\n\t\tlevel++;\r\n\t\tmessage = \"level\" + level;\r\n\t\twaitingForKeyPress = true;\r\n\t\tisGameStart = false;\r\n\t\tif (level == 4 && loopMode){ level = 1; ++cycle; setAlienSpeed(); createAliens();}\r\n\t\tif (level == 4 && killCount > Integer.parseInt(globalStorage.getUserBestScore())) {\r\n\t\t\tmessage = \"mission complete! New best score!\";\r\n\t\t\twaitingForKeyPress = true;\r\n\t\t\tisGameStart = false;\r\n\t\t\tresultSender(Integer.toString(killCount));\r\n\t\t} else if (level == 4) {\r\n\t\t\tmessage = \"mission complete\";\r\n\t\t\twaitingForKeyPress = true;\r\n\t\t\tisGameStart = false;\r\n\t\t}\r\n\r\n\r\n\t}\r\n\tpublic void resultSender(String result){\r\n\t\tfirebaseTool.setUserBestScore(globalStorage.getUserID(), result);\r\n\t\tglobalStorage.setUserBestScore(result); // 베스트 스코어 업데이트\r\n\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Notification that an alien has been killed\r\n\t\t */\r\n//\tpublic void notifyAlienKilled() {\r\n//\t\t// reduce the alient count, if there are none left, the player has won!\r\n//\t\talienCount--;\r\n//\t\tSystem.out.println(\"notifyAlienKilled() called, alienCount: \" + alienCount);\r\n//\r\n//\t\tif (alienCount == 0) {\r\n//\t\t\tnotifyWin();\r\n//\t\t}\r\n\tpublic void itemDrop(int x, int y){\r\n\t\tif (killCount%3 == 0 && killCount/3 >= 1){\r\n\t\t\taddEntity(new ItemEntity(this,x,y));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic void notifyAlienKilled(Entity other) {\r\n\t\t// reduce the alient count, if there are none left, the player has won!\r\n\t\talienCount--;\r\n\t\tkillCount++;\r\n\t\titemDrop(other.getX(), other.getY());\r\n\t\tSystem.out.println(killCount);\r\n\r\n\r\n\t\t\tif (level == 1) {\r\n\t\t\t\tif (alienCount == 2) {\r\n\t\t\t\t\tnotifyWin();\r\n\t\t\t\t}\r\n\t\t\t} else if (level == 2) {\r\n\t\t\t\tif(alienCount%2 == 0){\r\n\t\t\t\t\tlevel2shot();\r\n\t\t\t\t}\r\n\t\t\t\tif (alienCount == 2) {\r\n\t\t\t\t\tnotifyWin();\r\n\t\t\t\t}\r\n\t\t\t} else if (level == 3) {\r\n\t\t\t\tif(alienCount%5 ==0){\r\n\t\t\t\t\tbossAttack();\r\n\t\t\t\t}\r\n\t\t\t\tif (alienCount == 0) {\r\n\t\t\t\t\tnotifyWin();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n//\r\n\t\t\t// if there are still some aliens left then they all need to get faster, so\r\n\t\t\t// speed up all the existing aliens\r\n\t\t\tfor (int i = 0; i < entities.size(); i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);// 게임의 상태 확인 엔티티\r\n\t\t\t\tif (level == 1) {\r\n\t\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement() * 1.00);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (level == 2) {\r\n\t\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < entities.size(); i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);// 게임의 상태 확인 엔티티\r\n\t\t\t\tif (level == 1) {\r\n\t\t\t\t\tif (entity instanceof level2alienEntity) {\r\n\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (level == 2) {\r\n\t\t\t\t\tif (entity instanceof level2alienEntity) {\r\n\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n//\r\n\t\t\t// if there are still some aliens left then they all need to get faster, so\r\n\t\t\t// speed up all the existing aliens\r\n\t\t\tfor (int i = 0; i < entities.size(); i++) {\r\n\t\t\t\tEntity entity = entities.get(i);// 게임의 상태 확인 엔티티\r\n\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\t\t\t\t\tif (level == 1) {\r\n\t\t\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (level == 2) {\r\n\t\t\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Attempt to fire a shot from the player. Its called \"try\"\r\n\t\t * since we must first check that the player can fire at this\r\n\t\t * point, i.e. has he/she waited long enough between shots\r\n\t\t */\r\n\t\tpublic void tryToFire() {\r\n\t\t\tShipEntity ship = (ShipEntity) ShipCounter[0];\r\n\t\t\tif (ship.isDead()) return;\r\n\t\t\t// check that we have waiting long enough to fire\r\n\t\t\tif (System.currentTimeMillis() - ship.getFireTime() < ship.getFireRatio()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\t\tship.setFireTime(System.currentTimeMillis());\r\n\t\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.png\",ShipCounter[0].getX()+10,ShipCounter[0].getY()-30);\r\n\t\t\tentities.add(shot);\r\n\t\t\tExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\t\t\tBackgroundMusic ss = new BackgroundMusic(\"src/main/resources/audio/shot.wav\", executorService);\r\n\t\t\texecutorService.execute(ss);\r\n\t\t\t/*try {\r\n\t\t\t\tAudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(\"src/main/resources/audio/shot.wav\"));\r\n\t\t\t\tClip clip = AudioSystem.getClip();\r\n\t\t\t\tclip.open(audioInputStream);\r\n\t\t\t\tclip.setFramePosition(0);\r\n\t\t\t\t//볼륨조정\r\n\t\t\t\tFloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);\r\n\t\t\t\tgainControl.setValue(-20.0f);\r\n\t\t\t\tclip.start();\r\n\t\t\t} catch (Exception ex) {\r\n\t\t\t\tex.printStackTrace();\r\n\t\t\t}*/\r\n\t\t}\r\n\r\n\t\tpublic void level2shot(){\r\n\r\n\t\t\tint randomX = new Random().nextInt(600); // 0부터 599까지의 랜덤한 x좌표 생성\r\n\t\t\tbossacttackentity bossshot = new bossacttackentity(this, \"sprites/shot.gif\", randomX, 100);\r\n\t\t\tentities.add(bossshot);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tAudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(\"src/main/resources/audio/shot.wav\"));\r\n\t\t\t\tClip clip = AudioSystem.getClip();\r\n\t\t\t\tclip.open(audioInputStream);\r\n\t\t\t\tclip.setFramePosition(0);\r\n\t\t\t\t//볼륨조정\r\n\t\t\t\tFloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);\r\n\t\t\t\tgainControl.setValue(-20.0f);\r\n\t\t\t\tclip.start();\r\n\t\t\t} catch (Exception ex) {\r\n\t\t\t\tex.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tpublic void bossAttack() {\r\n\r\n\t\tint randomX = new Random().nextInt(600); // 0부터 599까지의 랜덤한 x좌표 생성\r\n\t\tbossacttackentity bossshot = new bossacttackentity(this, \"sprites/bossShot.png\", randomX, 100);\r\n\t\tentities.add(bossshot);\r\n\t}\r\n\tpublic void tryToFire2() {\r\n\t\t\tShipEntity ship = (ShipEntity) ShipCounter[1];\r\n\t\t\tif (ship.isDead()) return;\r\n\t\t\t// check that we have waiting long enough to fire\r\n\t\t\tif (System.currentTimeMillis() - ship.getFireTime() < ship.getFireRatio()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\t\tship.setFireTime(System.currentTimeMillis());\r\n\t\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.gif\",ShipCounter[1].getX()+10,ShipCounter[1].getY()-30);\r\n\t\t\tentities.add(shot);\r\n\r\n\t\t\tExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\t\t\tBackgroundMusic ss = new BackgroundMusic(\"src/main/resources/audio/shot.wav\", executorService);\r\n\t\t\texecutorService.execute(ss);\r\n\t}\r\n\r\n\t/**\r\n\t * The main game loop. This loop is running during all game\r\n\t * play as is responsible for the following activities:\r\n\t * <p>\r\n\t * - Working out the speed of the game loop to update moves\r\n\t * - Moving the game entities\r\n\t * - Drawing the screen contents (entities, text)\r\n\t * - Updating game events\r\n\t * - Checking Input\r\n\t * <p>\r\n\t */\r\n   public void gameLoop() {\r\n\t\tlastLoopTime = SystemTimer.getTime();\r\n\t\t// keep looping round til the game ends\r\n\t\twhile (gameRunning) {\r\n\t\t\t// work out how long its been since the last update, this\r\n\t\t\t// will be used to calculate how far the entities should\r\n\t\t\t// move this loop\r\n\t\t\tlong delta = SystemTimer.getTime() - lastLoopTime;\r\n\t\t\t//lastLoopTime = SystemTimer.getTime();\r\n\t\t\tlastLoopTime = SystemTimer.getTime();\r\n            /*System.out.format(\"%02d\", aMinute); System.out.print(':');\r\n\t\t\tSystem.out.format(\"%02d\", aSecond); System.out.print('.');\r\n\t\t\tSystem.out.format(\"%02d%n\", tenToHundMillis);*/\r\n\t\t\t/**\r\n\t\t\t * delta could be a second, lastLooptime is 1ms. And its count up about 10ms.\r\n\t\t\t * so we will use this class to get a live time ticks up from down 4 numbers of digits\r\n\t\t\t * */\r\n\t\t\t//System.out.println(delta+\", \"+lastLoopTime);\r\n\t\t\t// update the frame counter\r\n\t\t\tlastFpsTime += delta;\r\n\t\t\tfps++;\r\n\t\t\t// update our FPS counter if a second has passed since\r\n\t\t\t// we last recorded\r\n\t\t\tif (lastFpsTime >= 1000) {\r\n\t\t\t\tcontainer.setTitle(windowTitle+\" (FPS: \"+fps+\")\");\r\n\t\t\t\tlastFpsTime = 0;\r\n\t\t\t\tfps = 0;\r\n\t\t\t}\r\n\t\t\t// Get hold of a graphics context for the accelerated\r\n\t\t\t// surface and blank it out\r\n\t\t\tGraphics2D g = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tg.setColor(Color.black);\r\n\t\t\tg.fillRect(0,0,800,600);\r\n\t\t\t//Status HUD\r\n\t\t\tGraphics2D userHUD = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tuserHUD.setColor(Color.white);\r\n\t\t\tuserHUD.drawString(\"Score : \"+killCount,(800-g.getFontMetrics().stringWidth(\"Score : \"+killCount))/2,20);\r\n\t\t\tuserHUD.drawString(timeStamp,5,580);\r\n\t\t\t// cycle round asking each entity to move itself\r\n\t\t\tif (!waitingForKeyPress) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\t\tentity.move(delta);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// cycle round drawing all the entities we have in the game\r\n\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\tentity.draw(g);\r\n\t\t\t}\r\n\t\t\t// brute force collisions, compare every entity against\r\n\t\t\t// every other entity. If any of them collide notify\r\n\t\t\t// both entities that the collision has occured\r\n\t\t\tfor (int p=0;p<entities.size();p++) {\r\n\t\t\t\tfor (int s=p+1;s<entities.size();s++) {\r\n\t\t\t\t\tEntity me = (Entity) entities.get(p);\r\n\t\t\t\t\tEntity him = (Entity) entities.get(s);\r\n\t\t\t\t\tif (me.collidesWith(him)) {\r\n\t\t\t\t\t\tme.collidedWith(him);\r\n\t\t\t\t\t\thim.collidedWith(me);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// remove any entity that has been marked for clear up\r\n\t\t\tentities.removeAll(removeList);\r\n\t\t\tremoveList.clear();\r\n\t\t\t// if a game event has indicated that game logic should\r\n\t\t\t// be resolved, cycle round every entity requesting that\r\n\t\t\t// their personal logic should be considered.\r\n\t\t\tif (logicRequiredThisLoop) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = entities.get(i);\r\n\t\t\t\t\tentity.doLogic();\r\n\t\t\t\t}\r\n\t\t\t\tlogicRequiredThisLoop = false;\r\n\t\t\t}\r\n\t\t\t// if we're waiting for an \"any key\" press then draw the\r\n\t\t\t// current message\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tg.setColor(Color.white);\r\n\t\t\t\tg.drawString(message,(800-g.getFontMetrics().stringWidth(message))/2,250);\r\n\t\t\t\tg.drawString(\"Press any key\",(800-g.getFontMetrics().stringWidth(\"Press any key\"))/2,300);\r\n\t\t\t} else {\r\n\t\t\t\tisGameStart = true;\r\n\t\t\t}\r\n\t\t\ttimeCalc();\r\n\t\t\t// finally, we've completed drawing so clear up the graphics\r\n\t\t\t// and flip the buffer over\r\n\t\t\t//g.dispose();\r\n\t\t\tstrategy.show();\r\n\t\t\t// resolve the movement of the ship. First assume the ship\r\n\t\t\t// isn't moving. If either cursor key is pressed then\r\n\t\t\t// update the movement appropraitely\r\n\t\t\t//1P Controlb\r\n\t\t\tshipControl1();\r\n\t\t\t//2P control\r\n\t\t\tshipControl2();\r\n\t\t\t// if we're pressing fire, attempt to fire\r\n\t\t\tif (firePressed) {\r\n\t\t\t\ttryToFire();\r\n\t\t\t}\r\n\t\t\tif (fire2Pressed){\r\n\t\t\t\tif(!multiPlay)return;\r\n\t\t\t\ttryToFire2();\r\n\t\t\t}\r\n\t\t\t// we want each frame to take 10 milliseconds, to do this\r\n\t\t\t// we've recorded when we started the frame. We add 10 milliseconds\r\n\t\t\t// to this and then factor in the current time to give\r\n\t\t\t// us our final value to wait for\r\n\t\t\tSystemTimer.sleep(lastLoopTime+10-SystemTimer.getTime());\r\n\r\n\r\n\t\t}\r\n\t\t }\r\n\t\t/**\r\n\t\t * The main game loop. This loop is running during all game\r\n\t\t * play as is responsible for the following activities:\r\n\t\t * <p>\r\n\t\t * - Working out the speed of the game loop to update moves\r\n\t\t * - Moving the game entities\r\n\t\t * - Drawing the screen contents (entities, text)\r\n\t\t * - Updating game events\r\n\t\t * - Checking Input\r\n\t\t * <p>\r\n\t\t */\r\n\r\n\tpublic String giveSurvivalTime() {\r\n\t\treturn String.format(\"%02d\", aMinute) + \":\" + String.format(\"%02d\", aSecond) + \".\" + String.format(\"%02d\", tenToHundMillis);\r\n\t}\r\n\tpublic int giveKillScore(){\r\n\t\treturn killCount;\r\n\t}\r\n\r\n\t/**\r\n\t * A class to handle keyboard input from the user. The class\r\n\t * handles both dynamic input during game play, i.e. left/right\r\n\t * and shoot, and more static type input (i.e. press any key to\r\n\t * continue)\r\n\t *\r\n\t * This has been implemented as an inner class more through\r\n\t * habbit then anything else. Its perfectly normal to implement\r\n\t * this as seperate class if slight less convienient.\r\n\t *\r\n\t * @author Kevin Glass\r\n\t */\r\n\tprivate class KeyInputHandler extends KeyAdapter {\r\n\t\t/**\r\n\t\t * The number of key presses we've had while waiting for an \"any key\" press\r\n\t\t */\r\n\t\tprivate int pressCount = 1;\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been pressed. Note that\r\n\t\t * a key being pressed is equal to being pushed down but *NOT*\r\n\t\t * released. Thats where keyTyped() comes in.\r\n\t\t *\r\n\t\t * @param e The details of the key that was pressed\r\n\t\t */\r\n\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"press\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP) {\r\n\t\t\t\tupPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_DOWN) {\r\n\t\t\t\tdownPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_A) {\r\n\t\t\t\tleft2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_D) {\r\n\t\t\t\tright2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_W) {\r\n\t\t\t\tup2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_S) {\r\n\t\t\t\tdown2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_1) {\r\n\t\t\t\tfire2Pressed = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been released.\r\n\t\t *\r\n\t\t * @param e The details of the key that was released\r\n\t\t */\r\n\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"released\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP) {\r\n\t\t\t\tupPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_DOWN) {\r\n\t\t\t\tdownPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_A) {\r\n\t\t\t\tleft2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_D) {\r\n\t\t\t\tright2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_W) {\r\n\t\t\t\tup2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_S) {\r\n\t\t\t\tdown2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_1) {\r\n\t\t\t\tfire2Pressed = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been typed. Note that\r\n\t\t * typing a key means to both press and then release it.\r\n\t\t *\r\n\t\t * @param e The details of the key that was typed.\r\n\t\t */\r\n\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t// if we're waiting for a \"any key\" type then\r\n\t\t\t// check if we've recieved any recently. We may\r\n\t\t\t// have had a keyType() event from the user releasing\r\n\t\t\t// the shoot or move keys, hence the use of the \"pressCount\"\r\n\t\t\t// counter.\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tif (pressCount == 1) {\r\n\t\t\t\t\t// since we've now recieved our key typed\r\n\t\t\t\t\t// event we can mark it as such and start\r\n\t\t\t\t\t// our new game\r\n\t\t\t\t\twaitingForKeyPress = false;\r\n\t\t\t\t\tstartGame();\r\n\t\t\t\t\tpressCount = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpressCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if we hit escape, then quit the game\r\n\t\t\tif (e.getKeyChar() == 27) {\r\n\t\t\t\tSystem.exit(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic void shipControl1() {\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[0];\r\n\t\tif (leftPressed && !rightPressed && !upPressed && !downPressed) ship.movingLogic(9);\r\n\t\t\t//right unique move\r\n\t\telse if (rightPressed && !leftPressed && !upPressed && !downPressed) ship.movingLogic(3);\r\n\t\t\t//up unique move\r\n\t\telse if (upPressed && !downPressed && !rightPressed && !leftPressed) ship.movingLogic(12);\r\n\t\t\t//down unique move\r\n\t\telse if (downPressed && !upPressed && !rightPressed && !leftPressed) ship.movingLogic(6);\r\n\t\t\t//left&up degree 45\r\n\t\telse if (leftPressed && upPressed && !rightPressed && !downPressed) ship.movingLogic(11);\r\n\t\telse if (leftPressed && downPressed && !rightPressed && !upPressed) ship.movingLogic(7);\r\n\t\telse if (rightPressed && upPressed && !downPressed && !leftPressed) ship.movingLogic(1);\r\n\t\telse if (rightPressed && downPressed && !upPressed && !leftPressed) ship.movingLogic(5);\r\n\t\telse ship.movingLogic(0);\r\n\t}\r\n\tpublic int getAlienSpeed(){\r\n\t\treturn levelSpeedControl;\r\n\t}\r\n\tpublic void setAlienSpeed(){\r\n\t\tlevelSpeedControl*=1.02;\r\n\t}\r\n\r\n\tpublic void shipControl2() {\r\n\t\tif(!multiPlay)return;\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[1];\r\n\t\tif (left2Pressed && !right2Pressed && !up2Pressed && !down2Pressed) ship.movingLogic(9);\r\n\t\t//right unique move\r\n\t\telse if (right2Pressed && !left2Pressed && !up2Pressed && !down2Pressed) ship.movingLogic(3);\r\n\t\t//up unique move\r\n\t\telse if (up2Pressed && !down2Pressed && !right2Pressed && !left2Pressed) ship.movingLogic(12);\r\n\t\t//down unique move\r\n\t\telse if (down2Pressed && !up2Pressed && !right2Pressed && !left2Pressed) ship.movingLogic(6);\r\n\t\t//left&up degree 45\r\n\t\telse if (left2Pressed && up2Pressed && !right2Pressed && !down2Pressed) ship.movingLogic(11);\r\n\t\telse if (left2Pressed && down2Pressed && !right2Pressed && !up2Pressed) ship.movingLogic(7);\r\n\t\telse if (right2Pressed && up2Pressed && !down2Pressed && !left2Pressed) ship.movingLogic(1);\r\n\t\telse if (right2Pressed && down2Pressed && !up2Pressed && !left2Pressed) ship.movingLogic(5);\r\n\t\telse ship.movingLogic(0);\r\n\t}\r\n\t/*public void shipSpeedControl(Entity entity, long SpeedTgt){\r\n\t\tentity.setMoveSpeed(SpeedTgt);\r\n\t}*/\r\n\tpublic void shipFireRatioControl(ShipEntity ship, long RatioTgt){\r\n\t\tship.setFireRatio(RatioTgt);\r\n\t}\r\n\r\n\tpublic void timeCalc(){//time is spent even not started\r\n\t\tif(goGo==false)return;\r\n\t\telse if(player1Dead && player2Dead)return;\r\n\t\ttenToHundMillis = (int) ((lastLoopTime - initTime) / 10 % 100);//default time duration\r\n\t\taSecond = (int) lastLoopTime / 1000 % 60;\r\n\t\taMinute = (int) lastLoopTime / 60000 % 60;\r\n\t\ttimeStamp = String.format(\"%02d\", aMinute) + \":\" + String.format(\"%02d\", aSecond) + \".\" + String.format(\"%02d\", tenToHundMillis);\r\n\t}\r\n\r\n\t/**\r\n\t * The entry point into the game. We'll simply create an\r\n\t * instance of class which will start the display and game\r\n\t * loop.\r\n\t *\r\n\t * @param argv The arguments that are passed into our game\r\n\t */\r\n\t/*public static void main(String[] argv) {\r\n\t\tGame g = new Game(\"\");\r\n\t\t// Start the main game loop, note: this method will not\r\n\t\t// return until the game has finished running. Hence we are\r\n\t\t// using the actual main thread to run the game.\r\n\t\tg.gameLoop();\r\n\t}*/\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/spaceinvaders/Game.java b/src/main/java/spaceinvaders/Game.java
---- a/src/main/java/spaceinvaders/Game.java	(revision 4f1ecddd01741f52792589c6cfd6f6dd077d75cc)
-+++ b/src/main/java/spaceinvaders/Game.java	(date 1681662855957)
-@@ -361,7 +361,7 @@
- 							Point[] pointArray = points.toArray(new Point[0]); // convert set to array
- 							Entity alien = new AlienEntity(Game.this, pointArray[count].x, pointArray[count].y,getAlienSpeed());
- 							entities.add(alien);
--							count +=2 ; // increase count by 2 to prevent two aliens being added at once
-+							count ++ ; // increase count by 2 to prevent two aliens being added at once
- 						}
- 					} else {
- 						timer.stop(); // stop the timer when the game is over
-@@ -379,9 +379,7 @@
- 					if (isGameStart) {
- 
- 						if (count < alienCount) {
--							timer.setInitialDelay(1000);
--							timer.setDelay(1000);
--							timer.start();
-+
- 							Point[] pointArray = points.toArray(new Point[0]); // convert set to array
- 							Entity alien = new level2alienEntity(Game.this, pointArray[count].x, pointArray[count].y);
- 							entities.add(alien);
-Index: src/main/java/spaceinvaders/BackgroundMusic.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package spaceinvaders;\r\n\r\nimport javax.sound.sampled.*;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.concurrent.Executor;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class BackgroundMusic implements Runnable {\r\n    private String filepath;\r\n    private Executor executor;\r\n\r\n    public BackgroundMusic(String filepath, Executor executor) {\r\n        this.filepath = filepath;\r\n        this.executor = executor;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        executor.execute(() -> {\r\n            try {\r\n                AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(filepath));\r\n                Clip clip = AudioSystem.getClip();\r\n                clip.open(audioInputStream);\r\n                clip.start();\r\n                System.out.println(\"음악 재생 시작\");\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            } catch (UnsupportedAudioFileException e) {\r\n                throw new RuntimeException(e);\r\n            } catch (LineUnavailableException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//package spaceinvaders;\r\n//\r\n//import javax.sound.sampled.*;\r\n//import java.io.File;\r\n//import java.io.IOException;\r\n//\r\n//public class BackgroundMusic {\r\n//    public BackgroundMusic(){\r\n//        try {\r\n//            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(\"src/main/resources/audio/backgroundmusic.wav\"));\r\n//            Clip clip = AudioSystem.getClip();\r\n//            clip.open(audioInputStream);\r\n//\r\n//            //소리설정\r\n//            FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);\r\n//\r\n//            //볼륨조정\r\n//            gainControl.setValue(-20.0f);\r\n//\r\n//            clip.start();\r\n//\r\n//            System.out.println(\"노래 시작\");\r\n//        } catch (IOException e) {\r\n//            throw new RuntimeException(e);\r\n//        } catch (UnsupportedAudioFileException e) {\r\n//            throw new RuntimeException(e);\r\n//        } catch (LineUnavailableException e) {\r\n//            throw new RuntimeException(e);\r\n//        }\r\n//    }\r\n//\r\n//    public static void pause() {\r\n//        Clip clip = null;\r\n//        try {\r\n//            clip = AudioSystem.getClip();\r\n//        } catch (LineUnavailableException e) {\r\n//            throw new RuntimeException(e);\r\n//        }\r\n//        clip.stop();\r\n//    }\r\n//}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/spaceinvaders/BackgroundMusic.java b/src/main/java/spaceinvaders/BackgroundMusic.java
---- a/src/main/java/spaceinvaders/BackgroundMusic.java	(revision 4f1ecddd01741f52792589c6cfd6f6dd077d75cc)
-+++ b/src/main/java/spaceinvaders/BackgroundMusic.java	(date 1681664239941)
-@@ -24,7 +24,6 @@
-                 Clip clip = AudioSystem.getClip();
-                 clip.open(audioInputStream);
-                 clip.start();
--                System.out.println("음악 재생 시작");
-             } catch (IOException e) {
-                 throw new RuntimeException(e);
-             } catch (UnsupportedAudioFileException e) {
-Index: src/main/java/spaceinvaders/Mypage.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package spaceinvaders;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\nimport javax.swing.ImageIcon;\r\n\r\n\r\npublic class Mypage extends JFrame {\r\n    private Mypage mypage = this;\r\n    private FirebaseTool firebaseTool;\r\n    private GlobalStorage globalStorage;\r\n    private String currentTheme;\r\n    private String currentProfilePicture;\r\n    private JComboBox<String> themeSelector;\r\n    private JLabel background;\r\n    private JComboBox<String> pictureSelector;\r\n    private JLabel profileLabel;\r\n    private String themeImagePath = \"\";\r\n    private String profileImagePath = \"\";\r\n    private Window window;\r\n\r\n    public Mypage(Window window) {\r\n        this.window = window;\r\n        setTitle(\"Spaceinvaders\");\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setSize(800, 600);\r\n        setLocationRelativeTo(null);\r\n        setResizable(false);\r\n\r\n        firebaseTool = FirebaseTool.getInstance();\r\n        globalStorage = GlobalStorage.getInstance();\r\n\r\n        JPanel panel = new JPanel();\r\n        panel.setLayout(null);\r\n\r\n        String[] themes = {\"1\", \"2\", \"3\", \"4\", \"5\"};\r\n        themeSelector = new JComboBox<>(themes);\r\n        themeSelector.setBounds(450, 420, 305, 30);\r\n        panel.add(themeSelector);\r\n\r\n        String[] profilePictures = {\"1\", \"2\", \"3\", \"4\", \"5\"};\r\n        pictureSelector = new JComboBox<>(profilePictures);\r\n        pictureSelector.setBounds(450, 460, 305, 30);\r\n        panel.add(pictureSelector);\r\n\r\n        // add event listeners to handle theme and profile picture selection\r\n        themeSelector.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                currentTheme = (String) themeSelector.getSelectedItem();\r\n                firebaseTool.setUserTheme(globalStorage.getUserID(), currentTheme);\r\n                globalStorage.setUserTheme(currentTheme); // 현재 테마 업데이트\r\n                applyTheme(currentTheme);\r\n            }\r\n        });\r\n\r\n        pictureSelector.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                currentProfilePicture = (String) pictureSelector.getSelectedItem();\r\n                firebaseTool.setUserProfileImage(globalStorage.getUserID(), currentProfilePicture);\r\n                globalStorage.setUserProfileImage(currentProfilePicture); // 현재 프로필 이미지 업데이트\r\n                applyProfilePicture(currentProfilePicture);\r\n            }\r\n        });\r\n\r\n        JButton apply = new JButton(\"적용\");\r\n        apply.setBounds(650,510,80,30);\r\n        apply.setBackground(Color.WHITE);\r\n        apply.addMouseListener(new MouseAdapter() {\r\n            @Override\r\n            public void mousePressed(MouseEvent e) {\r\n                mypage.dispose();\r\n                new Window(mypage.themeImagePath, mypage.profileImagePath);\r\n\r\n            }\r\n        });\r\n\r\n        panel.add(apply);\r\n        background = new JLabel();\r\n        background.setBounds(0, 0, getWidth(), getHeight());\r\n        panel.add(background);\r\n        getContentPane().add(panel);\r\n\r\n        System.out.println(\"user theme : \" + globalStorage.getUserTheme() + \" user profile : \" + globalStorage.getUserProfileImage());\r\n\r\n        applyTheme(globalStorage.getUserTheme());\r\n        applyProfilePicture(globalStorage.getUserProfileImage());\r\n\r\n        setVisible(true);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    private void applyTheme(String theme) {\r\n        int width = 800; // 원하는 이미지 폭\r\n        int height = 600; // 원하는 이미지 높이\r\n\r\n        if (theme.equals(\"1\")) {\r\n            this.themeImagePath = \"src/main/resources/sprites/Theme1.jpg\";\r\n        } else if (theme.equals(\"2\")) {\r\n            this.themeImagePath = \"src/main/resources/sprites/Theme2.jpg\";\r\n        } else if (theme.equals(\"3\")) {\r\n            this.themeImagePath = \"src/main/resources/sprites/Theme3.jpg\";\r\n        } else if (theme.equals(\"4\")) {\r\n            this.themeImagePath = \"src/main/resources/sprites/Theme4.jpg\";\r\n        } else if (theme.equals(\"5\")) {\r\n            this.themeImagePath = \"src/main/resources/sprites/Theme5.jpg\";\r\n        }\r\n\r\n        ImageIcon icon = new ImageIcon(this.themeImagePath);\r\n        Image image = icon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);\r\n        icon = new ImageIcon(image);\r\n        background.setIcon(icon);\r\n    }\r\n\r\n\r\n    private void applyProfilePicture(String picture) {\r\n//        this.profileImagePath = \"/sprites/Profile1.jpg\"; // 기본 프로필 사진 경로\r\n        int profileWidth = 100; // 프로필 사진 폭\r\n        int profileHeight = 100; // 프로필 사진 높이\r\n\r\n        if (picture.equals(\"1\")) {\r\n            this.profileImagePath = \"/sprites/Profile1.jpg\";\r\n        } else if (picture.equals(\"2\")) {\r\n            this.profileImagePath = \"/sprites/Profile2.jpg\";\r\n        } else if (picture.equals(\"3\")) {\r\n            this.profileImagePath = \"/sprites/Profile3.png\";\r\n        } else if (picture.equals(\"4\")) {\r\n            this.profileImagePath = \"/sprites/Profile4.png\";\r\n        } else if (picture.equals(\"5\")) {\r\n            this.profileImagePath = \"/sprites/Profile5.png\";\r\n        }\r\n\r\n        ImageIcon profileIcon = new ImageIcon(getClass().getResource(this.profileImagePath));\r\n        Image profileImage = profileIcon.getImage().getScaledInstance(profileWidth, profileHeight, Image.SCALE_SMOOTH);\r\n        profileIcon = new ImageIcon(profileImage);\r\n//        background.setIcon(profileIcon);\r\n\r\n        /*// 기존에 추가된 프로필 사진 라벨이 있다면 먼저 제거합니다.\r\n        if (profileLabel != null) {\r\n            background.remove(profileLabel);\r\n        }\r\n\r\n*/\r\n        profileLabel = new JLabel(profileIcon);\r\n        profileLabel.setBounds(550, 100, profileWidth, profileHeight);\r\n\r\n        background.add(profileLabel); // background 라벨 위에 새로운 프로필 사진을 추가\r\n        background.setComponentZOrder(profileLabel, 0); // profileLabel 라벨이 background 라벨 위에 나타나도록 설정\r\n        background.validate();\r\n        //applyTheme(currentTheme);\r\n    }\r\n//    public static void main(String[] args){\r\n//\r\n//        Mypage mypage = new Mypage();\r\n//\r\n//\r\n//    }\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/spaceinvaders/Mypage.java b/src/main/java/spaceinvaders/Mypage.java
---- a/src/main/java/spaceinvaders/Mypage.java	(revision 4f1ecddd01741f52792589c6cfd6f6dd077d75cc)
-+++ b/src/main/java/spaceinvaders/Mypage.java	(date 1681662443665)
-@@ -103,6 +103,7 @@
-         int height = 600; // 원하는 이미지 높이
- 
-         if (theme.equals("1")) {
-+
-             this.themeImagePath = "src/main/resources/sprites/Theme1.jpg";
-         } else if (theme.equals("2")) {
-             this.themeImagePath = "src/main/resources/sprites/Theme2.jpg";
