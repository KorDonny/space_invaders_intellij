Index: src/main/java/spaceinvaders/entity/ShipEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spaceinvaders.entity;\r\n\r\nimport spaceinvaders.Game;\r\n\r\n/**\r\n * The entity that represents the players ship\r\n * \r\n * @author Kevin Glass\r\n */\r\npublic class ShipEntity extends Entity {\r\n\t/**\r\n\t * The game in which the ship exists\r\n\t */\r\n\tprivate Game game;\r\n\tprivate boolean player2, deadSign;\r\n\tprivate long fireTime, fireRatio;\r\n\tprivate LifeCounter playerLifes;\r\n\tprivate int moveSpeed;\r\n\r\n\t/**\r\n\t * Create a new entity to represent the players ship\r\n\t *\r\n\t * @param game The game in which the ship is being created\r\n\t * @param ref  The reference to the sprite to show for the ship\r\n\t * @param x    The initial x location of the player's ship\r\n\t * @param y    The initial y location of the player's ship\r\n\t */\r\n\t//boolean can make decision to multi play\r\n\tpublic ShipEntity(Game game, String ref, int x, int y, boolean player) {\r\n\t\tsuper(ref, x, y);\r\n\t\tthis.player2 = player;\r\n\t\tthis.game = game;\r\n\t\tdeadSign = false;\r\n\t\tfireRatio = 500;\r\n\t\tplayerLifes = new LifeCounter(game, null, this);\r\n\t\tthis.moveSpeed=300;\r\n\t}\r\n\t/**\r\n\t * Request that the ship move itself based on an elapsed ammount of\r\n\t * time\r\n\t *\r\n\t * @param delta The time that has elapsed since last move (ms)\r\n\t */\r\n\tpublic void move(long delta) {\r\n\t\t// if we're moving left and have reached the left hand side\r\n\t\t// of the screen, don't move\r\n\t\tif ((dx < 0) && (x < 10)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// if we're moving right and have reached the right hand side\r\n\t\t// of the screen, don't move\r\n\t\tif ((dx > 0) && (x > 750)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//same as horizontal.\r\n\t\tif ((dy < 0) && (y < 10)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif ((dy > 0) && (y > 550)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsuper.move(delta);\r\n\t\t}\r\n\r\n\t/**\r\n\t * Notification that the player's ship has collided with something\r\n\t *\r\n\t * @param other The entity with which the ship has collided\r\n\t */\r\n\tpublic void movingLogic(int direction){\r\n\t\tif(direction == 9)this.setHorizontalMovement(-getMoveSpeed());\r\n\t\telse if(direction == 11){this.setHorizontalMovement(-getMoveSpeed());this.setVerticalMovement(-getMoveSpeed());}\r\n\t\telse if(direction == 12)this.setVerticalMovement(-getMoveSpeed());\r\n\t\telse if(direction == 1){this.setVerticalMovement(-getMoveSpeed());this.setHorizontalMovement(getMoveSpeed());}\r\n\t\telse if(direction == 3)this.setHorizontalMovement(getMoveSpeed());\r\n\t\telse if(direction == 5){this.setHorizontalMovement(getMoveSpeed()); this.setVerticalMovement(getMoveSpeed());}\r\n\t\telse if(direction == 6)this.setVerticalMovement(getMoveSpeed());\r\n\t\telse if(direction == 7){this.setVerticalMovement(getMoveSpeed());this.setHorizontalMovement(-getMoveSpeed());}\r\n\t\telse{this.setHorizontalMovement(0);this.setVerticalMovement(0);}\r\n\t}\r\n\tpublic void collidedWith(Entity other) {\r\n\t\t// if its an alien, notify the game that the player is dead\r\n\r\n//\t\tif (player2) {\r\n//\t\t\tif (other instanceof AlienEntity) {\r\n//\t\t\t\tif (playerLife == 1) {\r\n//\t\t\t\t\tgame.notifyHit(game.LifeCounter[2 + playerLife]);\r\n//\t\t\t\t\tgame.removeEntity(this);\r\n//\t\t\t\t\t--playerLife;\r\n//\t\t\t\t\tgame.notifyDeath(2);\r\n//\t\t\t\t} else {\r\n//\t\t\t\t\tgame.notifyDeath(2);\r\n//\t\t\t\t}\r\n//\t\t\t\telse{\r\n//\t\t\t\t\tgame.removeEntity(other);\r\n//\t\t\t\t\tgame.notifyHit(game.LifeCounter[2 + playerLife]);\r\n//\t\t\t\t\t--playerLife;\r\n//\t\t\t\t}\r\n//\t\t\t} else if (other instanceof level2alienEntity) {\r\n////\t\t\t\tif (playerLife == 1) {\r\n////\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n////\t\t\t\t\tgame.removeEntity(this);\r\n////\t\t\t\t\t--playerLife;\r\n////\t\t\t\t\tgame.notifyDeath(2);\r\n////\t\t\t\t} else {\r\n////\t\t\t\t\tgame.removeEntity(other);\r\n////\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n////\t\t\t\t\t--playerLife;\r\n////\t\t\t\t}\r\n////\t\t\t} else if (other instanceof bosseEntity) {\r\n////\t\t\t\tif (playerLife > 1) {\r\n////\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n////\t\t\t\t\t--playerLife;\r\n////\t\t\t\t} else if (playerLife == 1) {\r\n////\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n////\t\t\t\t\t--playerLife;\r\n////\t\t\t\t\tgame.notifyDeath(2);\r\n////\t\t\t\t\tgame.removeEntity(this);\r\n////\t\t\t\t\t{\r\n////\r\n//\t\t\t\t\t}\r\n//\t\t\t\t}\r\n//\t\t\t} else {\r\n//\t\t\t\tif (other instanceof AlienEntity) {\r\n//\t\t\t\t\tif (playerLife == 1) {\r\n//\t\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n//\t\t\t\t\t}\r\n//\t\t\t\t} else {\r\n//\t\t\t\t\tif (other instanceof AlienEntity) {\r\n//\t\t\t\t\t\tif (playerLife == 1) {\r\n//\t\t\t\t\t\t\tgame.notifyHit(game.LifeCounter[playerLife - 1]);\r\n//\t\t\t\t\t\t\tgame.removeEntity(this);\r\n//\t\t\t\t\t\t\t--playerLife;\r\n//\t\t\t\t\t\t\tgame.notifyDeath(2);\r\n//\t\t\t\t\t\t} else {\r\n//\t\t\t\t\t\t\tgame.notifyDeath(1);\r\n//\t\t\t\t\t\t}\r\n//\t\t\t\t\t} else {\r\n//\t\t\t\t\t\tgame.removeEntity(other);\r\n//\t\t\t\t\t\tgame.notifyHit(game.LifeCounter[playerLife - 1]);\r\n//\t\t\t\t\t\t--playerLife;\r\n//\t\t\t\t\t}\r\n//\t\t\t\t}\r\n//\t\t\t} else if (other instanceof level2alienEntity) {\r\n//\t\t\t\tif (playerLife == 1) {\r\n//\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n//\t\t\t\t\tgame.removeEntity(this);\r\n//\t\t\t\t\t--playerLife;\r\n//\t\t\t\t\tgame.notifyDeath(2);\r\n//\t\t\t\t} else {\r\n//\t\t\t\t\tgame.removeEntity(other);\r\n//\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n//\t\t\t\t\t--playerLife;\r\n//\t\t\t\t}\r\n//\r\n//\r\n//\t\t\t} else if (other instanceof bosseEntity) {\r\n//\t\t\t\tif (playerLife > 1) {\r\n//\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n//\t\t\t\t\t--playerLife;\r\n//\t\t\t\t} else if (playerLife == 1) {\r\n//\t\t\t\t\tgame.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n//\t\t\t\t\t--playerLife;\r\n//\t\t\t\t\tgame.notifyDeath(2);\r\n//\t\t\t\t\tgame.removeEntity(this);\r\n//\t\t\t\t\t{\r\n//\r\n//\t\t\t\t\t}\r\n//\r\n//\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n//\t\t}\r\n//\t}\r\n//}\r\n\t\tif (other instanceof AlienEntity) {\r\n\t\t\tif (getLife() == 0)return;\r\n\t\t\tif (getLife() == 1) {\r\n\t\t\t\tgame.removeEntity(this);\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t\tif (is2P()) game.notifyDeath(2);\r\n\t\t\t\telse game.notifyDeath(1);\r\n\t\t\t} else {\r\n\t\t\t\tgame.removeEntity(other);\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (other instanceof ItemEntity){\r\n\t\t\tif (getLife() == 3) return;\r\n\t\t\tgame.removeEntity(other);\r\n\t\t\tLifeIncrease();\r\n\t\t}\r\n\t\telse if (other instanceof bosseEntity) {\r\n\t\t\tif (getLife() > 1) {\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t}\r\n\t\t\telse if (getLife() == 1) {\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t\tgame.notifyDeath(2);\r\n\t\t\t\tgame.removeEntity(this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (other instanceof level2alienEntity) {\r\n\t\t\tif (getLife() > 1) {\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t}\r\n\t\t\telse if (getLife() == 1) {\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t\tgame.notifyDeath(2);\r\n\t\t\t\tgame.removeEntity(this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (other instanceof bossacttackentity) {\r\n\t\t\tif (getLife() > 1) {\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t}\r\n\t\t\telse if (getLife() == 1) {\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t\tgame.notifyDeath(2);\r\n\t\t\t\tgame.removeEntity(this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (other instanceof level2alienEntity) {\r\n\t\t\tif (getLife() > 1) {\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t}\r\n\t\t\telse if (getLife() == 1) {\r\n\t\t\t\tLifeDecrease();\r\n\t\t\t\tgame.notifyDeath(2);\r\n\t\t\t\tgame.removeEntity(this);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\r\n\t\t/** \t\t\t\t\tgame.notifyHit(game.LifeCounter[2+playerLife]);\r\n         --playerLife;\r\n         }\r\n         }else if (other instanceof level2alienEntity) {\r\n         if (playerLife == 1) {\r\n         game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n         game.removeEntity(this);\r\n         --playerLife;\r\n         game.notifyDeath(2);\r\n         } else {\r\n         game.removeEntity(other);\r\n         game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n         --playerLife;\r\n         }\r\n         } else if (other instanceof bosseEntity) {\r\n         if (playerLife > 1) {\r\n         game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n         --playerLife;\r\n         } else if (playerLife == 1) {\r\n         game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n         --playerLife;\r\n         game.notifyDeath(2);\r\n         game.removeEntity(this);\r\n         }}\r\n\r\n\r\n\r\n         }\r\n\r\n         else {\r\n         if (other instanceof AlienEntity) {\r\n         if (playerLife == 1) {\r\n         game.notifyHit(game.LifeCounter[playerLife - 1]);\r\n         game.removeEntity(this);\r\n         --playerLife;\r\n         game.notifyDeath(1);\r\n         }\r\n         else{\r\n         game.removeEntity(other);\r\n         game.notifyHit(game.LifeCounter[playerLife - 1]);\r\n         --playerLife;\r\n         }\r\n         }\r\n         else if (other instanceof level2alienEntity) {\r\n         if (playerLife == 1) {\r\n         game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n         game.removeEntity(this);\r\n         --playerLife;\r\n         game.notifyDeath(1);\r\n         } else {\r\n         game.removeEntity(other);\r\n         game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);\r\n         --playerLife;\r\n         } */\r\n\t}\r\n\tpublic void LifeIncrease () {\r\n\t\tplayerLifes.LifeIncrease();\r\n\t}\r\n\tpublic void LifeDecrease () {\r\n\t\tplayerLifes.LifeDecrease();\r\n\t}\r\n\tpublic boolean is2P () {\r\n\t\treturn player2;\r\n\t}\r\n\tpublic int getLife () {\r\n\t\treturn playerLifes.getEntityLife();\r\n\t}\r\n\tpublic long getFireTime (){\r\n\t\treturn fireTime;\r\n\t}\r\n\tpublic void setFireTime (long fireTimeStmp){\r\n\t\tthis.fireTime = fireTimeStmp;\r\n\t}\r\n\tpublic long getFireRatio (){\r\n\t\treturn fireRatio;\r\n\t}\r\n\tpublic void setFireRatio(long fireRatioTgt){\r\n\t\tthis.fireRatio = fireRatioTgt;\r\n\t}\r\n\tpublic boolean isDead(){\r\n\t\treturn deadSign;\r\n\t}\r\n\tpublic void playerDead(){\r\n\t\tthis.deadSign = true;\r\n\t}\r\n\tpublic int getMoveSpeed(){ return moveSpeed; }\r\n\tpublic void setMoveSpeed(int tgt){ moveSpeed=tgt; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/spaceinvaders/entity/ShipEntity.java b/src/main/java/spaceinvaders/entity/ShipEntity.java
--- a/src/main/java/spaceinvaders/entity/ShipEntity.java	(revision 2418d80f17199f80cc7f9b121d5db4fddc3f9ca3)
+++ b/src/main/java/spaceinvaders/entity/ShipEntity.java	(date 1681659164678)
@@ -79,100 +79,7 @@
 		else{this.setHorizontalMovement(0);this.setVerticalMovement(0);}
 	}
 	public void collidedWith(Entity other) {
-		// if its an alien, notify the game that the player is dead
 
-//		if (player2) {
-//			if (other instanceof AlienEntity) {
-//				if (playerLife == 1) {
-//					game.notifyHit(game.LifeCounter[2 + playerLife]);
-//					game.removeEntity(this);
-//					--playerLife;
-//					game.notifyDeath(2);
-//				} else {
-//					game.notifyDeath(2);
-//				}
-//				else{
-//					game.removeEntity(other);
-//					game.notifyHit(game.LifeCounter[2 + playerLife]);
-//					--playerLife;
-//				}
-//			} else if (other instanceof level2alienEntity) {
-////				if (playerLife == 1) {
-////					game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-////					game.removeEntity(this);
-////					--playerLife;
-////					game.notifyDeath(2);
-////				} else {
-////					game.removeEntity(other);
-////					game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-////					--playerLife;
-////				}
-////			} else if (other instanceof bosseEntity) {
-////				if (playerLife > 1) {
-////					game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-////					--playerLife;
-////				} else if (playerLife == 1) {
-////					game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-////					--playerLife;
-////					game.notifyDeath(2);
-////					game.removeEntity(this);
-////					{
-////
-//					}
-//				}
-//			} else {
-//				if (other instanceof AlienEntity) {
-//					if (playerLife == 1) {
-//						game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-//					}
-//				} else {
-//					if (other instanceof AlienEntity) {
-//						if (playerLife == 1) {
-//							game.notifyHit(game.LifeCounter[playerLife - 1]);
-//							game.removeEntity(this);
-//							--playerLife;
-//							game.notifyDeath(2);
-//						} else {
-//							game.notifyDeath(1);
-//						}
-//					} else {
-//						game.removeEntity(other);
-//						game.notifyHit(game.LifeCounter[playerLife - 1]);
-//						--playerLife;
-//					}
-//				}
-//			} else if (other instanceof level2alienEntity) {
-//				if (playerLife == 1) {
-//					game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-//					game.removeEntity(this);
-//					--playerLife;
-//					game.notifyDeath(2);
-//				} else {
-//					game.removeEntity(other);
-//					game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-//					--playerLife;
-//				}
-//
-//
-//			} else if (other instanceof bosseEntity) {
-//				if (playerLife > 1) {
-//					game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-//					--playerLife;
-//				} else if (playerLife == 1) {
-//					game.notifyHit((LifeEntity) game.LifeCounter[playerLife - 1]);
-//					--playerLife;
-//					game.notifyDeath(2);
-//					game.removeEntity(this);
-//					{
-//
-//					}
-//
-//
-//				}
-//			}
-//		}
-//	}
-//}
 		if (other instanceof AlienEntity) {
 			if (getLife() == 0)return;
 			if (getLife() == 1) {
@@ -223,7 +130,7 @@
 			}
 		}
 
-		else if (other instanceof level2alienEntity) {
+		else if (other instanceof level2shotEntity) {
 			if (getLife() > 1) {
 				LifeDecrease();
 			}
Index: src/main/java/spaceinvaders/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spaceinvaders;\r\n\r\nimport com.google.firebase.database.*;\r\nimport com.google.firebase.internal.NonNull;\r\nimport spaceinvaders.entity.*;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.Timer;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferStrategy;\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.Random;\r\nimport java.util.Set;\r\nimport java.util.*;\r\nimport java.util.List;\r\n\r\nimport javax.sound.sampled.AudioInputStream;\r\nimport javax.sound.sampled.AudioSystem;\r\nimport javax.sound.sampled.Clip;\r\nimport javax.sound.sampled.FloatControl;\r\nimport javax.swing.*;\r\n\r\n\r\n/**\r\n * The main hook of our game. This class with both act as a manager\r\n * for the display and central mediator for the game logic.\r\n *\r\n * Display management will consist of a loop that cycles round all\r\n * entities in the game asking them to move and then drawing them\r\n * in the appropriate place. With the help of an inner class it\r\n * will also allow the player to control the main ship.\r\n *\r\n * As a mediator it will be informed when entities within our game\r\n * detect events (e.g. alient killed, played died) and will take\r\n * appropriate game actions.\r\n *\r\n * @author Kevin Glass\r\n */\r\npublic class Game extends Canvas {\r\n\t/**\r\n\t * The stragey that allows us to use accelerate page flipping\r\n\t */\r\n\tprivate final BufferStrategy strategy;\r\n\t/**\r\n\t * True if the game is currently \"running\", i.e. the game loop is looping\r\n\t */\r\n\tprivate final boolean gameRunning = true;\r\n\t/**\r\n\t * The list of all the entities that exist in our game\r\n\t */\r\n\tprivate final ArrayList<Entity> entities = new ArrayList<>();\r\n\t/**\r\n\t * The list of entities that need to be removed from the game this loop\r\n\t */\r\n\tprivate final ArrayList<Entity> removeList = new ArrayList<Entity>();\r\n\t/** The number of aliens left on the screen */\r\n\tprivate int alienCount;\r\n\t/** The message to display which waiting for a key press */\r\n\tprivate String message = \"\";\r\n\t/** True if we're holding up game play until a key has been pressed */\r\n\tprivate boolean waitingForKeyPress = true;\r\n\t/** True if the left cursor key is currently pressed */\r\n\tprivate Entity[] ShipCounter = new ShipEntity[2]; private boolean multiPlay, loopMode;\r\n\tprivate boolean leftPressed; private boolean left2Pressed;\r\n\tprivate boolean rightPressed; private boolean right2Pressed;\r\n\tprivate boolean upPressed; private boolean up2Pressed;\r\n\tprivate boolean downPressed; private boolean down2Pressed;\r\n\tprivate boolean firePressed; private boolean fire2Pressed;\r\n\tprivate boolean player1Dead, player2Dead;\t\t\tprivate boolean goGo = false;\r\n\tprivate long lastFire = 0; private long last2Fire = 0;\r\n\tprivate long level2lastFire = 0; private long level2ShotInterval = 0;\r\n\tprivate long bossfire= 0; private long bossShotInterval= 0;\r\n\tprivate long firingInterval = 500; private long firing2Interval = 500;\r\n\t/** True if game logic needs to be applied this loop, normally as a result of a game event */\r\n\tprivate boolean logicRequiredThisLoop = false;\r\n\tprivate boolean isGameStart = false;\r\n\t/**\r\n\t * The last time at which we recorded the frame rate\r\n\t */\r\n\tprivate long lastFpsTime;\r\n\t/**\r\n\t * The current number of frames recorded\r\n\t */\r\n\tprivate int fps, cycle;\r\n\t/**\r\n\t * The normal title of the game window\r\n\t */\r\n\tprivate final String windowTitle = \"Space Invaders 102\";\r\n\t/**\r\n\t * The game window that we'll update with the frame count\r\n\t */\r\n\tprivate final JFrame container;\r\n\tprivate Thread timeCounterThread;\r\n\tprivate int level = 1;\r\n\tprivate Timer timer;\r\n\tprivate int killCount;\r\n\tprivate static User User;\r\n\tprivate static String bestScore = \"\";\r\n\tprivate FirebaseTool firebaseTool;\r\n\r\n\tprivate GlobalStorage globalStorage;\r\n\r\n\tprivate JLabel backgroundMap;\r\n\r\n\tprivate Clip clip;\r\n\r\n\t//Record Variables\r\n\tprivate int tenToHundMillis, aSecond, aMinute;\r\n\t/** timedisplay */\r\n\tprivate String timeStamp=\"\";\r\n\tprivate long lastLoopTime; private long initTime;\r\n\tprivate RecordRecorder playBoard = new RecordRecorder(this);\r\n\r\n\tprivate int levelSpeedControl=75;\r\n\tprivate JLabel backLabel;\r\n\r\n\t/**\r\n\t * Construct our game and set it running.\r\n\t */\r\n\tpublic Game(String option) {\r\n\t\tcycle = 0;\r\n\t\tif (option.equals(\"2p\")) multiPlay = true;\r\n\t\telse if (option.equals(\"1p\")) multiPlay = false;\r\n\t\telse if (option.equals(\"loopMode\")) {multiPlay =false; loopMode = true;}\r\n\t\t// create a frame to contain our game\r\n\t\tcontainer = new JFrame(\"Space Invaders 102\");\r\n\t\t// get hold the content of the frame and set up the resolution of the game\r\n\t\tJPanel panel = (JPanel) container.getContentPane();\r\n\t\tpanel.setPreferredSize(new Dimension(800,600));\r\n\t\tpanel.setLayout(null);\r\n\r\n\t\t// Add background image\r\n\t\tImageIcon backgroundImage = new ImageIcon(\"sprites/rankingPage.png\");\r\n\t\tJLabel background = new JLabel(backgroundImage);\r\n\t\tcontainer.add(background,BorderLayout.CENTER);\r\n\r\n\r\n\r\n\t\t/*TimeCounter timeCounter = new TimeCounter((int) 0);*/\r\n\t\t//panel.add(timeCounter);\r\n\t\t// setup our canvas size and put it into the content of the frame\r\n\t\tsetBounds(0,0,800,600);\r\n\t\tpanel.add(this);\r\n\t\t// TimeCounter 객체를 실행하는 Thread를 생성하고 시작합니다.\r\n\t\t/*timeCounterThread = new Thread(timeCounter);\r\n\t\ttimeCounterThread.start();*/\r\n\t\t// Tell AWT not to bother repainting our canvas since we're\r\n\t\t// going to do that our self in accelerated mode\r\n\t\tsetIgnoreRepaint(true);\r\n\t\t// finally make the window visible\r\n\t\tcontainer.pack();\r\n\t\tcontainer.setResizable(false);\r\n\t\tcontainer.setVisible(true);\r\n\r\n\t\t// add a listener to respond to the user closing the window. If they\r\n\t\t// do we'd like to exit the game\r\n\t\tcontainer.addWindowListener(new WindowAdapter() {\r\n\t\t\tpublic void windowClosing(WindowEvent e) {\r\n\t\t\t\tSystem.exit(0);\r\n\t\t\t}\r\n\t\t});\r\n\t\t// add a key input system (defined below) to our canvas\r\n\t\t// so we can respond to key pressed\r\n\t\taddKeyListener(new KeyInputHandler());\r\n\t\t// request the focus so key events come to us\r\n\t\trequestFocus();\r\n\t\t// create the buffering strategy which will allow AWT\r\n\t\t// to manage our accelerated graphics\r\n\t\tcreateBufferStrategy(2);\r\n\t\tstrategy = getBufferStrategy();\r\n\r\n\t\t// initialise the entities in our game so there's something\r\n\t\t// to see at startup\r\n\t\tif (option.equals(\"2p\")) {\r\n\t\t\tSystem.out.println(\"2p\");\r\n\t\t}\r\n\r\n\r\n\r\n\t\tfirebaseTool = FirebaseTool.getInstance();\r\n\t\tglobalStorage = GlobalStorage.getInstance();\r\n\r\n\t\tinitEntities();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Start a fresh game, this should clear out any old data and\r\n\t * create a new set.\r\n\t */\r\n\tprivate void startGame() {\r\n\r\n\r\n\t\t// clear out any existing entities and intialise a new set\r\n\t\tentities.clear();\r\n\t\tinitEntities();\r\n\r\n\t\t// blank out any keyboard settings we might currently have\r\n\t\tleftPressed = false;\r\n\t\trightPressed = false;\r\n\t\tupPressed = false;\r\n\t\tdownPressed = false;\r\n\t\tfirePressed = false;\r\n\t\tplayer1Dead = false;\r\n\r\n\t\t//2P key init\r\n\t\tleft2Pressed = false;\r\n\t\tright2Pressed = false;\r\n\t\tup2Pressed = false;\r\n\t\tdown2Pressed = false;\r\n\t\tfire2Pressed = false;\r\n\t\tplayer2Dead = false;\r\n\t\ttenToHundMillis=0; aSecond=0; aMinute=0;\r\n\t\t//윈도우랑 게임창 노래 겹쳐들림\r\n//\t\tnew BackgroundMusic();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initialise the starting state of the entities (ship and aliens). Each\r\n\t * entitiy will be added to the overall list of entities in the game.\r\n\t */\r\n//\tprivate void initEntities() {\r\n//\t\t// create the player ship and place it roughly in the center of the screen\r\n//\t\tship = new ShipEntity(this, \"sprites/ship.gif\",370,550);\r\n//\t\tentities.add(ship);\r\n//\t\tentities.add(ship2);\r\n//\t\tint idx = 20;\r\n//\t\tfor (Entity Life : LifeCounter){\r\n//\t\t\tif (idx > 60) {\r\n//\t\t\t\tLife = new LifeEntity(this, 655+idx, 580);\r\n//\t\t\t\tLifeCounter[idx/20 - 1] = Life;\r\n//\t\t\t}\r\n//\t\t\telse {\r\n//\t\t\t\tLife = new LifeEntity(this, idx-15, 580);\r\n//\t\t\t\tLifeCounter[idx/20 - 1] = Life;\r\n//\t\t\t}\r\n//\t\t\tentities.add(Life);\r\n//\t\t\tidx+=20;\r\n//\t\t}\r\n//\r\n//\t\t/** 아래 함수에 int 중복선언하고 나서, 값 할당이 initGame로컬변수 취급받다보니 중괄호 범위 넘어간 이후로 값이 틀어지는것 같습니다.\r\n//\t\t *\r\n//\t\t *\r\n//\t\t *\r\n//\t\t *\r\n//\t\t * */\r\n//\t\talienCount = 3;\r\n//\r\n//\t\tint alienCount = 50; // number of aliens\r\n//\t\tint alienWidth = 50; // width of each alien\r\n//\t\tint alienHeight = 30; // height of each alien\r\n//\t\tint minY = 10; // minimum y-coordinate\r\n//\t\tint maxY = 200; // maximum y-coordinate\r\n//\t\tint delay = 1000; // time delay between each batch of aliens (in milliseconds)\r\n//\r\n//\t\tfinal Set<Point> points = new HashSet<>(); // set to keep track of the generated points\r\n//\t\tRandom random = new Random();\r\n//\r\n//\t\twhile (points.size() < alienCount) {\r\n//\t\t\tint x = random.nextInt(getWidth() - alienWidth);\r\n//\t\t\tint y = random.nextInt(maxY - minY) + minY;\r\n//\r\n//\t\t\t// check if the new point overlaps with any existing points\r\n//\t\t\tboolean overlapping = false;\r\n//\t\t\tfor (Point point : points) {\r\n//\t\t\t\tif (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {\r\n//\t\t\t\t\toverlapping = true;\r\n//\t\t\t\t\tbreak;\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n//\r\n//\t\t\t// if not overlapping, add the new point to the set\r\n//\t\t\tif (!overlapping) {\r\n\r\n\t//\t\t\t\tpoints.add(new Point(x, y));\r\n//\t\t\t}\r\n//\t\t}\r\n//\r\n//// create aliens for each generated point\r\n//\t\tfor (Point point : points) {\r\n//\t\t\tEntity alien = new AlienEntity(this, point.x, point.y);\r\n//\t\t\tentities.add(alien);\r\n//\t\t}}\r\n\tprivate void initEntities() {\r\n\t\tif (multiPlay){\r\n\t\t\tShipCounter[0] = new ShipEntity(this, \"sprites/ship1p.png\",350, 550, false);\r\n\t\t\tentities.add(ShipCounter[0]);\r\n\t\t\tShipCounter[1] = new ShipEntity(this, \"sprites/ship2p.png\",390, 550, true);\r\n\t\t\taddEntity(ShipCounter[1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tShipCounter[0] = new ShipEntity(this, \"sprites/ship2p.png\",370, 550, false);\r\n\t\t\tentities.add(ShipCounter[0]);\r\n\t\t}\r\n\t\tkillCount = 0;\r\n\r\n\t\t// create the aliens\r\n\r\n\t\tmessage =\"When you're ready, please press the button!\";\r\n\t\tcreateAliens();\r\n\r\n\t}\r\n\r\n\tprivate void createAliens() {\r\n\t\t// determine the parameters for the aliens based on the current level// increase the number of aliens by 2 for each level\r\n\t\talienCount = 10  + (level - 1) * 2;// increase the number of aliens by 2 for each level11\r\n\t\tint killCount = 0;\r\n\t\tint alienWidth = 50; // width of each alien\r\n\t\tint alienHeight = 30; // height of each alien\r\n\t\tint minY = 10; // minimum y-coordinate\r\n\t\tint maxY = 200; // maximum y-coordinate\r\n\t\tint delay = 1000; // time delay between each batch of aliens (in milliseconds)\r\n\r\n\t\t\tfinal Set<Point> points = new HashSet<>(); // set to keep track of the generated points\r\n\t\t\tRandom random = new Random();\r\n\r\n\t\t\twhile (points.size() < alienCount) {\r\n\t\t\t\tint x = random.nextInt(getWidth() - alienWidth);\r\n\t\t\t\tint y = random.nextInt(maxY - minY) + minY;\r\n\r\n\t\t\t\t// check if the new point overlaps with any existing points\r\n\t\t\t\tboolean overlapping = false;\r\n\t\t\t\tfor (Point point : points) {\r\n\t\t\t\t\tif (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {\r\n\t\t\t\t\t\toverlapping = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t// if not overlapping, add the new point to the set\r\n\t\t\tif (!overlapping) {\r\n\t\t\t\tpoints.add(new Point(x, y));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// create a timer to add aliens every delay milliseconds\r\n\t\tif (level == 1) {\r\n\t\t\ttimer = new Timer(delay, new ActionListener() {\r\n\t\t\t\tint count = 0;\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\r\n\t\t\t\t\tif (isGameStart) {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * this section is added by jgs\r\n\t\t\t\t\t\t * */\r\n\t\t\t\t\t\tinitTime=lastLoopTime;\r\n\t\t\t\t\t\taMinute=0; aSecond=0; tenToHundMillis=0;\r\n\t\t\t\t\t\tgoGo=true;\r\n\r\n\r\n\t\t\t\t\t\tif (count < alienCount) {\r\n\t\t\t\t\t\t\tPoint[] pointArray = points.toArray(new Point[0]); // convert set to array\r\n\t\t\t\t\t\t\tEntity alien = new AlienEntity(Game.this, pointArray[count].x, pointArray[count].y,getAlienSpeed());\r\n\t\t\t\t\t\t\tentities.add(alien);\r\n\t\t\t\t\t\t\tcount +=2 ; // increase count by 2 to prevent two aliens being added at once\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttimer.stop(); // stop the timer when the game is over\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (level == 2) {\r\n\r\n\t\t\ttimer = new Timer(delay, new ActionListener() {\r\n\t\t\t\tint count = 0;\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {\r\n\r\n\t\t\t\t\tif (isGameStart) {\r\n\r\n\t\t\t\t\t\tif (count < alienCount) {\r\n\t\t\t\t\t\t\ttimer.setInitialDelay(1000);\r\n\t\t\t\t\t\t\ttimer.setDelay(1000);\r\n\t\t\t\t\t\t\ttimer.start();\r\n\t\t\t\t\t\t\tPoint[] pointArray = points.toArray(new Point[0]); // convert set to array\r\n\t\t\t\t\t\t\tEntity alien = new level2alienEntity(Game.this, pointArray[count].x, pointArray[count].y);\r\n\t\t\t\t\t\t\tentities.add(alien);\r\n\t\t\t\t\t\t\tcount++; // increase count by 2 to prevent two aliens being added at once\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttimer.stop(); // stop the timer when the game is over\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (level == 3) {\r\n\t\t\talienCount = 100;\r\n\t\t\tbosseEntity boss = new bosseEntity(this, \"sprites/level2alien.png\", getWidth() / 2, 50);\r\n\t\t\tentities.add(boss);\r\n\t\t}\r\n\r\n\r\n\r\n\t\ttimer.setInitialDelay(1000);\r\n\t\ttimer.setDelay(1000);\r\n\t\ttimer.start();\r\n\t}\r\n\r\n\r\n\t// start timer }\r\n//             * Notification from a game entity that the logic of the game\r\n//             * should be run at the next opportunity (normally as a result of some\r\n//             * game event)\r\n//             */\r\n\r\n\t\tpublic void updateLogic() {\r\n\t\t\tlogicRequiredThisLoop = true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Remove an entity from the game. The entity removed will\r\n\t\t * no longer move or be drawn.\r\n\t\t *\r\n\t\t * @param entity The entity that should be removed\r\n\t\t */\r\n\t\tpublic void removeEntity(Entity entity) {\r\n\t\t\tremoveList.add(entity);\r\n\t\t}\r\n\r\n\t/** This can help you to access entities.add() in other class */\r\n\tpublic void addEntity(Entity entity){ entities.add(entity); }\r\n\r\n\t/**\r\n\t * Notification that the player has died.\r\n\t */\r\n\tpublic void notifyDeath(int status) {\r\n\t\tif(status == 1) {((ShipEntity)ShipCounter[0]).playerDead(); }\r\n\t\tif(status == 2) {((ShipEntity)ShipCounter[1]).playerDead(); }\r\n\t\tif(multiPlay){\r\n\t\t\tif (((ShipEntity)ShipCounter[0]).isDead() && ((ShipEntity)ShipCounter[1]).isDead()) notifyRetire();\r\n\t\t} else notifyRetire();\r\n\t}\r\n\r\n\tpublic void notifyRetire(){\r\n\t\tmessage = \"Oh no! They got you, try again?\";\r\n\t\twaitingForKeyPress = true;\r\n\t\tisGameStart = false;\r\n\t\t//for checking println\r\n\t\tplayBoard.printRecord();\r\n\t\tif (killCount > Integer.parseInt(globalStorage.getUserBestScore())) {\r\n\t\t\tmessage = \"Oh no!, but  New best score!\";\r\n\t\t\tresultSender(Integer.toString(killCount));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Notification that the player has won since all the aliens\r\n\t * are dead.\r\n\t */\r\n\tpublic void notifyWin() {\r\n\t\tmessage = \"Well done! You Win!\";\r\n\r\n\r\n\t\tlevel++;\r\n\t\tmessage = \"level\" + level;\r\n\t\twaitingForKeyPress = true;\r\n\t\tisGameStart = false;\r\n\t\tif (level == 4 && loopMode){ level = 1; ++cycle; setAlienSpeed(); createAliens();}\r\n\t\tif (level == 4 && killCount > Integer.parseInt(globalStorage.getUserBestScore())) {\r\n\t\t\tmessage = \"mission complete! New best score!\";\r\n\t\t\twaitingForKeyPress = true;\r\n\t\t\tisGameStart = false;\r\n\t\t\tresultSender(Integer.toString(killCount));\r\n\t\t} else if (level == 4) {\r\n\t\t\tmessage = \"mission complete\";\r\n\t\t\twaitingForKeyPress = true;\r\n\t\t\tisGameStart = false;\r\n\t\t}\r\n\r\n\r\n\t}\r\n\tpublic void resultSender(String result){\r\n\t\tfirebaseTool.setUserBestScore(globalStorage.getUserID(), result);\r\n\t\tglobalStorage.setUserBestScore(result); // 베스트 스코어 업데이트\r\n\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Notification that an alien has been killed\r\n\t\t */\r\n//\tpublic void notifyAlienKilled() {\r\n//\t\t// reduce the alient count, if there are none left, the player has won!\r\n//\t\talienCount--;\r\n//\t\tSystem.out.println(\"notifyAlienKilled() called, alienCount: \" + alienCount);\r\n//\r\n//\t\tif (alienCount == 0) {\r\n//\t\t\tnotifyWin();\r\n//\t\t}\r\n\tpublic void itemDrop(int x, int y){\r\n\t\tif (killCount%3 == 0 && killCount/3 >= 1){\r\n\t\t\taddEntity(new ItemEntity(this,x,y));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic void notifyAlienKilled(Entity other) {\r\n\t\t// reduce the alient count, if there are none left, the player has won!\r\n\t\talienCount--;\r\n\t\tkillCount++;\r\n\t\titemDrop(other.getX(), other.getY());\r\n\t\tSystem.out.println(killCount);\r\n\r\n\r\n\t\t\tif (level == 1) {\r\n\t\t\t\tif (alienCount == 2) {\r\n\t\t\t\t\tnotifyWin();\r\n\t\t\t\t}\r\n\t\t\t} else if (level == 2) {\r\n\t\t\t\tif(alienCount%2 == 0){\r\n\t\t\t\t\tlevel2shot();\r\n\t\t\t\t}\r\n\t\t\t\tif (alienCount == 2) {\r\n\t\t\t\t\tnotifyWin();\r\n\t\t\t\t}\r\n\t\t\t} else if (level == 3) {\r\n\t\t\t\tif(alienCount%5 ==0){\r\n\t\t\t\t\tbossAttack();\r\n\t\t\t\t}\r\n\t\t\t\tif (alienCount == 0) {\r\n\t\t\t\t\tnotifyWin();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n//\r\n\t\t\t// if there are still some aliens left then they all need to get faster, so\r\n\t\t\t// speed up all the existing aliens\r\n\t\t\tfor (int i = 0; i < entities.size(); i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);// 게임의 상태 확인 엔티티\r\n\t\t\t\tif (level == 1) {\r\n\t\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement() * 1.00);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (level == 2) {\r\n\t\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < entities.size(); i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);// 게임의 상태 확인 엔티티\r\n\t\t\t\tif (level == 1) {\r\n\t\t\t\t\tif (entity instanceof level2alienEntity) {\r\n\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (level == 2) {\r\n\t\t\t\t\tif (entity instanceof level2alienEntity) {\r\n\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n//\r\n\t\t\t// if there are still some aliens left then they all need to get faster, so\r\n\t\t\t// speed up all the existing aliens\r\n\t\t\tfor (int i = 0; i < entities.size(); i++) {\r\n\t\t\t\tEntity entity = entities.get(i);// 게임의 상태 확인 엔티티\r\n\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\t\t\t\t\tif (level == 1) {\r\n\t\t\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (level == 2) {\r\n\t\t\t\t\t\tif (entity instanceof AlienEntity) {\r\n\t\t\t\t\t\t\t// speed up by 2%\r\n\t\t\t\t\t\t\tentity.setHorizontalMovement(entity.getHorizontalMovement());\r\n\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Attempt to fire a shot from the player. Its called \"try\"\r\n\t\t * since we must first check that the player can fire at this\r\n\t\t * point, i.e. has he/she waited long enough between shots\r\n\t\t */\r\n\t\tpublic void tryToFire() {\r\n\t\t\tShipEntity ship = (ShipEntity) ShipCounter[0];\r\n\t\t\tif (ship.isDead()) return;\r\n\t\t\t// check that we have waiting long enough to fire\r\n\t\t\tif (System.currentTimeMillis() - ship.getFireTime() < ship.getFireRatio()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\t\tship.setFireTime(System.currentTimeMillis());\r\n\t\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.png\",ShipCounter[0].getX()+10,ShipCounter[0].getY()-30);\r\n\t\t\tentities.add(shot);\r\n\t\t\t/*try {\r\n\t\t\t\tAudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(\"src/main/resources/audio/shot.wav\"));\r\n\t\t\t\tClip clip = AudioSystem.getClip();\r\n\t\t\t\tclip.open(audioInputStream);\r\n\t\t\t\tclip.setFramePosition(0);\r\n\t\t\t\t//볼륨조정\r\n\t\t\t\tFloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);\r\n\t\t\t\tgainControl.setValue(-20.0f);\r\n\t\t\t\tclip.start();\r\n\t\t\t} catch (Exception ex) {\r\n\t\t\t\tex.printStackTrace();\r\n\t\t\t}*/\r\n\t\t}\r\n\r\n\t\tpublic void level2shot(){\r\n\r\n\t\t\tint randomX = new Random().nextInt(600); // 0부터 599까지의 랜덤한 x좌표 생성\r\n\t\t\tbossacttackentity bossshot = new bossacttackentity(this, \"sprites/shot.gif\", randomX, 100);\r\n\t\t\tentities.add(bossshot);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tAudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(\"src/main/resources/audio/shot.wav\"));\r\n\t\t\t\tClip clip = AudioSystem.getClip();\r\n\t\t\t\tclip.open(audioInputStream);\r\n\t\t\t\tclip.setFramePosition(0);\r\n\t\t\t\t//볼륨조정\r\n\t\t\t\tFloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);\r\n\t\t\t\tgainControl.setValue(-20.0f);\r\n\t\t\t\tclip.start();\r\n\t\t\t} catch (Exception ex) {\r\n\t\t\t\tex.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tpublic void bossAttack() {\r\n\r\n\t\tint randomX = new Random().nextInt(600); // 0부터 599까지의 랜덤한 x좌표 생성\r\n\t\tbossacttackentity bossshot = new bossacttackentity(this, \"sprites/bossattack.png\", randomX, 100);\r\n\t\tentities.add(bossshot);\r\n\t}\r\n\tpublic void tryToFire2() {\r\n\t\t\tShipEntity ship = (ShipEntity) ShipCounter[1];\r\n\t\t\tif (ship.isDead()) return;\r\n\t\t\t// check that we have waiting long enough to fire\r\n\t\t\tif (System.currentTimeMillis() - ship.getFireTime() < ship.getFireRatio()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\t\tship.setFireTime(System.currentTimeMillis());\r\n\t\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.gif\",ShipCounter[1].getX()+10,ShipCounter[1].getY()-30);\r\n\t\t\tentities.add(shot);\r\n\t}\r\n\r\n\t/**\r\n\t * The main game loop. This loop is running during all game\r\n\t * play as is responsible for the following activities:\r\n\t * <p>\r\n\t * - Working out the speed of the game loop to update moves\r\n\t * - Moving the game entities\r\n\t * - Drawing the screen contents (entities, text)\r\n\t * - Updating game events\r\n\t * - Checking Input\r\n\t * <p>\r\n\t */\r\n   public void gameLoop() {\r\n\t\tlastLoopTime = SystemTimer.getTime();\r\n\t\t// keep looping round til the game ends\r\n\t\twhile (gameRunning) {\r\n\t\t\t// work out how long its been since the last update, this\r\n\t\t\t// will be used to calculate how far the entities should\r\n\t\t\t// move this loop\r\n\t\t\tlong delta = SystemTimer.getTime() - lastLoopTime;\r\n\t\t\t//lastLoopTime = SystemTimer.getTime();\r\n\t\t\tlastLoopTime = SystemTimer.getTime();\r\n            /*System.out.format(\"%02d\", aMinute); System.out.print(':');\r\n\t\t\tSystem.out.format(\"%02d\", aSecond); System.out.print('.');\r\n\t\t\tSystem.out.format(\"%02d%n\", tenToHundMillis);*/\r\n\t\t\t/**\r\n\t\t\t * delta could be a second, lastLooptime is 1ms. And its count up about 10ms.\r\n\t\t\t * so we will use this class to get a live time ticks up from down 4 numbers of digits\r\n\t\t\t * */\r\n\t\t\t//System.out.println(delta+\", \"+lastLoopTime);\r\n\t\t\t// update the frame counter\r\n\t\t\tlastFpsTime += delta;\r\n\t\t\tfps++;\r\n\t\t\t// update our FPS counter if a second has passed since\r\n\t\t\t// we last recorded\r\n\t\t\tif (lastFpsTime >= 1000) {\r\n\t\t\t\tcontainer.setTitle(windowTitle+\" (FPS: \"+fps+\")\");\r\n\t\t\t\tlastFpsTime = 0;\r\n\t\t\t\tfps = 0;\r\n\t\t\t}\r\n\t\t\t// Get hold of a graphics context for the accelerated\r\n\t\t\t// surface and blank it out\r\n\t\t\tGraphics2D g = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tg.setColor(Color.black);\r\n\t\t\tg.fillRect(0,0,800,600);\r\n\t\t\t//Status HUD\r\n\t\t\tGraphics2D userHUD = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tuserHUD.setColor(Color.white);\r\n\t\t\tuserHUD.drawString(\"Score : \"+killCount,(800-g.getFontMetrics().stringWidth(\"Score : \"+killCount))/2,20);\r\n\t\t\tuserHUD.drawString(timeStamp,5,580);\r\n\t\t\t// cycle round asking each entity to move itself\r\n\t\t\tif (!waitingForKeyPress) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\t\tentity.move(delta);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// cycle round drawing all the entities we have in the game\r\n\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\tentity.draw(g);\r\n\t\t\t}\r\n\t\t\t// brute force collisions, compare every entity against\r\n\t\t\t// every other entity. If any of them collide notify\r\n\t\t\t// both entities that the collision has occured\r\n\t\t\tfor (int p=0;p<entities.size();p++) {\r\n\t\t\t\tfor (int s=p+1;s<entities.size();s++) {\r\n\t\t\t\t\tEntity me = (Entity) entities.get(p);\r\n\t\t\t\t\tEntity him = (Entity) entities.get(s);\r\n\t\t\t\t\tif (me.collidesWith(him)) {\r\n\t\t\t\t\t\tme.collidedWith(him);\r\n\t\t\t\t\t\thim.collidedWith(me);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// remove any entity that has been marked for clear up\r\n\t\t\tentities.removeAll(removeList);\r\n\t\t\tremoveList.clear();\r\n\t\t\t// if a game event has indicated that game logic should\r\n\t\t\t// be resolved, cycle round every entity requesting that\r\n\t\t\t// their personal logic should be considered.\r\n\t\t\tif (logicRequiredThisLoop) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = entities.get(i);\r\n\t\t\t\t\tentity.doLogic();\r\n\t\t\t\t}\r\n\t\t\t\tlogicRequiredThisLoop = false;\r\n\t\t\t}\r\n\t\t\t// if we're waiting for an \"any key\" press then draw the\r\n\t\t\t// current message\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tg.setColor(Color.white);\r\n\t\t\t\tg.drawString(message,(800-g.getFontMetrics().stringWidth(message))/2,250);\r\n\t\t\t\tg.drawString(\"Press any key\",(800-g.getFontMetrics().stringWidth(\"Press any key\"))/2,300);\r\n\t\t\t} else {\r\n\t\t\t\tisGameStart = true;\r\n\t\t\t}\r\n\t\t\ttimeCalc();\r\n\t\t\t// finally, we've completed drawing so clear up the graphics\r\n\t\t\t// and flip the buffer over\r\n\t\t\t//g.dispose();\r\n\t\t\tstrategy.show();\r\n\t\t\t// resolve the movement of the ship. First assume the ship\r\n\t\t\t// isn't moving. If either cursor key is pressed then\r\n\t\t\t// update the movement appropraitely\r\n\t\t\t//1P Controlb\r\n\t\t\tshipControl1();\r\n\t\t\t//2P control\r\n\t\t\tshipControl2();\r\n\t\t\t// if we're pressing fire, attempt to fire\r\n\t\t\tif (firePressed) {\r\n\t\t\t\ttryToFire();\r\n\t\t\t}\r\n\t\t\tif (fire2Pressed){\r\n\t\t\t\tif(!multiPlay)return;\r\n\t\t\t\ttryToFire2();\r\n\t\t\t}\r\n\t\t\t// we want each frame to take 10 milliseconds, to do this\r\n\t\t\t// we've recorded when we started the frame. We add 10 milliseconds\r\n\t\t\t// to this and then factor in the current time to give\r\n\t\t\t// us our final value to wait for\r\n\t\t\tSystemTimer.sleep(lastLoopTime+10-SystemTimer.getTime());\r\n\r\n\r\n\t\t}\r\n\t\t }\r\n\t\t/**\r\n\t\t * The main game loop. This loop is running during all game\r\n\t\t * play as is responsible for the following activities:\r\n\t\t * <p>\r\n\t\t * - Working out the speed of the game loop to update moves\r\n\t\t * - Moving the game entities\r\n\t\t * - Drawing the screen contents (entities, text)\r\n\t\t * - Updating game events\r\n\t\t * - Checking Input\r\n\t\t * <p>\r\n\t\t */\r\n\r\n\tpublic String giveSurvivalTime() {\r\n\t\treturn String.format(\"%02d\", aMinute) + \":\" + String.format(\"%02d\", aSecond) + \".\" + String.format(\"%02d\", tenToHundMillis);\r\n\t}\r\n\tpublic int giveKillScore(){\r\n\t\treturn killCount;\r\n\t}\r\n\r\n\t/**\r\n\t * A class to handle keyboard input from the user. The class\r\n\t * handles both dynamic input during game play, i.e. left/right\r\n\t * and shoot, and more static type input (i.e. press any key to\r\n\t * continue)\r\n\t *\r\n\t * This has been implemented as an inner class more through\r\n\t * habbit then anything else. Its perfectly normal to implement\r\n\t * this as seperate class if slight less convienient.\r\n\t *\r\n\t * @author Kevin Glass\r\n\t */\r\n\tprivate class KeyInputHandler extends KeyAdapter {\r\n\t\t/**\r\n\t\t * The number of key presses we've had while waiting for an \"any key\" press\r\n\t\t */\r\n\t\tprivate int pressCount = 1;\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been pressed. Note that\r\n\t\t * a key being pressed is equal to being pushed down but *NOT*\r\n\t\t * released. Thats where keyTyped() comes in.\r\n\t\t *\r\n\t\t * @param e The details of the key that was pressed\r\n\t\t */\r\n\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"press\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP) {\r\n\t\t\t\tupPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_DOWN) {\r\n\t\t\t\tdownPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_A) {\r\n\t\t\t\tleft2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_D) {\r\n\t\t\t\tright2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_W) {\r\n\t\t\t\tup2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_S) {\r\n\t\t\t\tdown2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_1) {\r\n\t\t\t\tfire2Pressed = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been released.\r\n\t\t *\r\n\t\t * @param e The details of the key that was released\r\n\t\t */\r\n\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"released\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP) {\r\n\t\t\t\tupPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_DOWN) {\r\n\t\t\t\tdownPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_A) {\r\n\t\t\t\tleft2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_D) {\r\n\t\t\t\tright2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_W) {\r\n\t\t\t\tup2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_S) {\r\n\t\t\t\tdown2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_1) {\r\n\t\t\t\tfire2Pressed = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been typed. Note that\r\n\t\t * typing a key means to both press and then release it.\r\n\t\t *\r\n\t\t * @param e The details of the key that was typed.\r\n\t\t */\r\n\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t// if we're waiting for a \"any key\" type then\r\n\t\t\t// check if we've recieved any recently. We may\r\n\t\t\t// have had a keyType() event from the user releasing\r\n\t\t\t// the shoot or move keys, hence the use of the \"pressCount\"\r\n\t\t\t// counter.\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tif (pressCount == 1) {\r\n\t\t\t\t\t// since we've now recieved our key typed\r\n\t\t\t\t\t// event we can mark it as such and start\r\n\t\t\t\t\t// our new game\r\n\t\t\t\t\twaitingForKeyPress = false;\r\n\t\t\t\t\tstartGame();\r\n\t\t\t\t\tpressCount = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpressCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if we hit escape, then quit the game\r\n\t\t\tif (e.getKeyChar() == 27) {\r\n\t\t\t\tSystem.exit(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic void shipControl1() {\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[0];\r\n\t\tif (leftPressed && !rightPressed && !upPressed && !downPressed) ship.movingLogic(9);\r\n\t\t\t//right unique move\r\n\t\telse if (rightPressed && !leftPressed && !upPressed && !downPressed) ship.movingLogic(3);\r\n\t\t\t//up unique move\r\n\t\telse if (upPressed && !downPressed && !rightPressed && !leftPressed) ship.movingLogic(12);\r\n\t\t\t//down unique move\r\n\t\telse if (downPressed && !upPressed && !rightPressed && !leftPressed) ship.movingLogic(6);\r\n\t\t\t//left&up degree 45\r\n\t\telse if (leftPressed && upPressed && !rightPressed && !downPressed) ship.movingLogic(11);\r\n\t\telse if (leftPressed && downPressed && !rightPressed && !upPressed) ship.movingLogic(7);\r\n\t\telse if (rightPressed && upPressed && !downPressed && !leftPressed) ship.movingLogic(1);\r\n\t\telse if (rightPressed && downPressed && !upPressed && !leftPressed) ship.movingLogic(5);\r\n\t\telse ship.movingLogic(0);\r\n\t}\r\n\tpublic int getAlienSpeed(){\r\n\t\treturn levelSpeedControl;\r\n\t}\r\n\tpublic void setAlienSpeed(){\r\n\t\tlevelSpeedControl*=1.02;\r\n\t}\r\n\r\n\tpublic void shipControl2() {\r\n\t\tif(!multiPlay)return;\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[1];\r\n\t\tif (left2Pressed && !right2Pressed && !up2Pressed && !down2Pressed) ship.movingLogic(9);\r\n\t\t//right unique move\r\n\t\telse if (right2Pressed && !left2Pressed && !up2Pressed && !down2Pressed) ship.movingLogic(3);\r\n\t\t//up unique move\r\n\t\telse if (up2Pressed && !down2Pressed && !right2Pressed && !left2Pressed) ship.movingLogic(12);\r\n\t\t//down unique move\r\n\t\telse if (down2Pressed && !up2Pressed && !right2Pressed && !left2Pressed) ship.movingLogic(6);\r\n\t\t//left&up degree 45\r\n\t\telse if (left2Pressed && up2Pressed && !right2Pressed && !down2Pressed) ship.movingLogic(11);\r\n\t\telse if (left2Pressed && down2Pressed && !right2Pressed && !up2Pressed) ship.movingLogic(7);\r\n\t\telse if (right2Pressed && up2Pressed && !down2Pressed && !left2Pressed) ship.movingLogic(1);\r\n\t\telse if (right2Pressed && down2Pressed && !up2Pressed && !left2Pressed) ship.movingLogic(5);\r\n\t\telse ship.movingLogic(0);\r\n\t}\r\n\t/*public void shipSpeedControl(Entity entity, long SpeedTgt){\r\n\t\tentity.setMoveSpeed(SpeedTgt);\r\n\t}*/\r\n\tpublic void shipFireRatioControl(ShipEntity ship, long RatioTgt){\r\n\t\tship.setFireRatio(RatioTgt);\r\n\t}\r\n\r\n\tpublic void timeCalc(){//time is spent even not started\r\n\t\tif(goGo==false)return;\r\n\t\telse if(player1Dead && player2Dead)return;\r\n\t\ttenToHundMillis = (int) ((lastLoopTime - initTime) / 10 % 100);//default time duration\r\n\t\taSecond = (int) lastLoopTime / 1000 % 60;\r\n\t\taMinute = (int) lastLoopTime / 60000 % 60;\r\n\t\ttimeStamp = String.format(\"%02d\", aMinute) + \":\" + String.format(\"%02d\", aSecond) + \".\" + String.format(\"%02d\", tenToHundMillis);\r\n\t}\r\n\r\n\t/**\r\n\t * The entry point into the game. We'll simply create an\r\n\t * instance of class which will start the display and game\r\n\t * loop.\r\n\t *\r\n\t * @param argv The arguments that are passed into our game\r\n\t */\r\n\t/*public static void main(String[] argv) {\r\n\t\tGame g = new Game(\"\");\r\n\t\t// Start the main game loop, note: this method will not\r\n\t\t// return until the game has finished running. Hence we are\r\n\t\t// using the actual main thread to run the game.\r\n\t\tg.gameLoop();\r\n\t}*/\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/spaceinvaders/Game.java b/src/main/java/spaceinvaders/Game.java
--- a/src/main/java/spaceinvaders/Game.java	(revision 2418d80f17199f80cc7f9b121d5db4fddc3f9ca3)
+++ b/src/main/java/spaceinvaders/Game.java	(date 1681656337200)
@@ -309,7 +309,7 @@
 
 	private void createAliens() {
 		// determine the parameters for the aliens based on the current level// increase the number of aliens by 2 for each level
-		alienCount = 10  + (level - 1) * 2;// increase the number of aliens by 2 for each level11
+		alienCount = 10 +(level - 1) * 2;// increase the number of aliens by 2 for each level11
 		int killCount = 0;
 		int alienWidth = 50; // width of each alien
 		int alienHeight = 30; // height of each alien
Index: src/main/java/spaceinvaders/Mypage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spaceinvaders;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport javax.swing.ImageIcon;\r\n\r\n\r\npublic class Mypage extends JFrame {\r\n    private FirebaseTool firebaseTool;\r\n    private GlobalStorage globalStorage;\r\n    private String currentTheme;\r\n    private String currentProfilePicture;\r\n    private JComboBox<String> themeSelector;\r\n    private JLabel background;\r\n    private JComboBox<String> pictureSelector;\r\n    private JLabel profileLabel;\r\n\r\n    public Mypage() {\r\n        setTitle(\"Spaceinvaders\");\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setSize(800, 600);\r\n        setLocationRelativeTo(null);\r\n        setResizable(false);\r\n\r\n        firebaseTool = FirebaseTool.getInstance();\r\n        globalStorage = GlobalStorage.getInstance();\r\n\r\n        JPanel panel = new JPanel();\r\n        panel.setLayout(null);\r\n\r\n        String[] themes = {\"1\", \"2\", \"3\", \"4\", \"5\"};\r\n        themeSelector = new JComboBox<>(themes);\r\n        themeSelector.setBounds(450, 420, 305, 30);\r\n        panel.add(themeSelector);\r\n\r\n        String[] profilePictures = {\"1\", \"2\", \"3\", \"4\", \"5\"};\r\n        pictureSelector = new JComboBox<>(profilePictures);\r\n        pictureSelector.setBounds(450, 460, 305, 30);\r\n        panel.add(pictureSelector);\r\n\r\n        // add event listeners to handle theme and profile picture selection\r\n        themeSelector.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                currentTheme = (String) themeSelector.getSelectedItem();\r\n                firebaseTool.setUserTheme(globalStorage.getUserID(), currentTheme);\r\n                globalStorage.setUserTheme(currentTheme); // 현재 테마 업데이트\r\n                applyTheme(currentTheme);\r\n            }\r\n        });\r\n\r\n        pictureSelector.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                currentProfilePicture = (String) pictureSelector.getSelectedItem();\r\n                firebaseTool.setUserProfileImage(globalStorage.getUserID(), currentProfilePicture);\r\n                globalStorage.setUserProfileImage(currentProfilePicture); // 현재 프로필 이미지 업데이트\r\n                applyProfilePicture(currentProfilePicture);\r\n            }\r\n        });\r\n\r\n        JButton apply = new JButton(\"적용\");\r\n        apply.setBounds(650,510,80,30);\r\n        apply.setBackground(Color.WHITE);\r\n\r\n        panel.add(apply);\r\n        background = new JLabel();\r\n        background.setBounds(0, 0, getWidth(), getHeight());\r\n        panel.add(background);\r\n        getContentPane().add(panel);\r\n\r\n        System.out.println(\"user theme : \" + globalStorage.getUserTheme() + \" user profile : \" + globalStorage.getUserProfileImage());\r\n\r\n        applyTheme(globalStorage.getUserTheme());\r\n        applyProfilePicture(globalStorage.getUserProfileImage());\r\n\r\n        setVisible(true);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    private void applyTheme(String theme) {\r\n        String imagePath = \"/sprites/Theme1.jpg\";\r\n        int width = 800; // 원하는 이미지 폭\r\n        int height = 600; // 원하는 이미지 높이\r\n\r\n        if (theme.equals(\"1\")) {\r\n            imagePath = \"/sprites/Theme1.jpg\";\r\n        } else if (theme.equals(\"2\")) {\r\n            imagePath = \"/sprites/Theme2.jpg\";\r\n        } else if (theme.equals(\"3\")) {\r\n            imagePath = \"/sprites/Theme3.jpg\";\r\n        } else if (theme.equals(\"4\")) {\r\n            imagePath = \"/sprites/Theme4.jpg\";\r\n        } else if (theme.equals(\"5\")) {\r\n            imagePath = \"/sprites/Theme5.jpg\";\r\n        }\r\n\r\n        ImageIcon icon = new ImageIcon(getClass().getResource(imagePath));\r\n        Image image = icon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);\r\n        icon = new ImageIcon(image);\r\n        background.setIcon(icon);\r\n    }\r\n\r\n\r\n    private void applyProfilePicture(String picture) {\r\n        String imagePath = \"/sprites/Profile1.jpg\"; // 기본 프로필 사진 경로\r\n        int profileWidth = 100; // 프로필 사진 폭\r\n        int profileHeight = 100; // 프로필 사진 높이\r\n\r\n        if (picture.equals(\"1\")) {\r\n            imagePath = \"/sprites/Profile1.jpg\";\r\n        } else if (picture.equals(\"2\")) {\r\n            imagePath = \"/sprites/Profile2.jpg\";\r\n        } else if (picture.equals(\"3\")) {\r\n            imagePath = \"/sprites/Profile3.jpg\";\r\n        } else if (picture.equals(\"4\")) {\r\n            imagePath = \"/sprites/Profile4.jpg\";\r\n        } else if (picture.equals(\"5\")) {\r\n            imagePath = \"/sprites/Profile5.jpg\";\r\n        }\r\n\r\n        ImageIcon profileIcon = new ImageIcon(getClass().getResource(imagePath));\r\n        Image profileImage = profileIcon.getImage().getScaledInstance(profileWidth, profileHeight, Image.SCALE_SMOOTH);\r\n        profileIcon = new ImageIcon(profileImage);\r\n\r\n        /*// 기존에 추가된 프로필 사진 라벨이 있다면 먼저 제거합니다.\r\n        if (profileLabel != null) {\r\n            background.remove(profileLabel);\r\n        }\r\n\r\n*/\r\n        profileLabel = new JLabel(profileIcon);\r\n        profileLabel.setBounds(550, 200, profileWidth, profileHeight);\r\n\r\n        background.add(profileLabel); // background 라벨 위에 새로운 프로필 사진을 추가\r\n        background.setComponentZOrder(profileLabel, 0); // profileLabel 라벨이 background 라벨 위에 나타나도록 설정\r\n        background.validate();\r\n        //applyTheme(currentTheme);\r\n    }\r\n    public static void main(String[] args){\r\n\r\n        Mypage mypage = new Mypage();\r\n\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/spaceinvaders/Mypage.java b/src/main/java/spaceinvaders/Mypage.java
--- a/src/main/java/spaceinvaders/Mypage.java	(revision 2418d80f17199f80cc7f9b121d5db4fddc3f9ca3)
+++ b/src/main/java/spaceinvaders/Mypage.java	(date 1681649549620)
@@ -140,7 +140,7 @@
         background.add(profileLabel); // background 라벨 위에 새로운 프로필 사진을 추가
         background.setComponentZOrder(profileLabel, 0); // profileLabel 라벨이 background 라벨 위에 나타나도록 설정
         background.validate();
-        //applyTheme(currentTheme);
+
     }
     public static void main(String[] args){
 
Index: src/main/java/spaceinvaders/Window.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spaceinvaders;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport javax.swing.ImageIcon;\r\n\r\npublic class Window extends JFrame {\r\n    private FirebaseTool firebaseTool;\r\n\r\n    private GlobalStorage globalStorage;\r\n\r\n    private JLabel label;\r\n    private JLabel label2;\r\n\r\n\r\n    public Window() {\r\n        setTitle(\"Spaceinvaders\");\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setSize(800, 600);\r\n        setLocationRelativeTo(null);\r\n        new BackgroundMusic();\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    public void showWindow(){\r\n        label = new JLabel();\r\n        label2 = new JLabel();\r\n        setVisible(true);\r\n        JPanel panel = new JPanel() {\r\n\r\n            @Override\r\n            public void paintComponent(Graphics g) {\r\n                super.paintComponent(g);\r\n                // 이미지 파일 경로를 적절히 수정하세요.\r\n                ImageIcon icon = new ImageIcon(getClass().getResource(\"/sprites/windowBack.png\"));\r\n                Image image = icon.getImage();\r\n                g.drawImage(image, 0, 0, getWidth(), getHeight(), null);\r\n\r\n//                ImageIcon btImage = new ImageIcon(getClass().getResource(\"/sprites/buttons1.jpg\"));\r\n//                g.drawImage(btImage.getImage(), 59, 30, 690, 510, null);\r\n\r\n//                ImageIcon optionButton = new ImageIcon(getClass().getResource(\"/sprites/optionButton.png\"));\r\n//                g.drawImage(optionButton.getImage(), 440,430,320,110, null);\r\n                ImageIcon basicProfile = new ImageIcon(getClass().getResource(\"/sprites/basicProfile.png\"));\r\n                g.drawImage(basicProfile.getImage(), 440,100,100,100,null);\r\n\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        panel.setLayout(null);\r\n\r\n//        JLabel playerName = new JLabel(); //플레이어 아이디\r\n//        JLabel playerBC = new JLabel(); //플레이어 최고점수\r\n//\r\n\r\n        label.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        label.setForeground(Color.WHITE);\r\n        label.setBounds(560, 110, 200, 30);\r\n//        panel.add(label);\r\n\r\n        label2.setFont(new Font(\"Arial\", Font.BOLD, 20));\r\n        label2.setForeground(Color.WHITE);\r\n        label2.setBounds(560, 150, 200, 30);\r\n//        panel.add(label2);\r\n\r\n//        FirebaseTool firebaseTool1 = new FirebaseTool();\r\n//        firebaseTool1.GetUserProfileImage(GlobalStorage.getInstance().getUserID());\r\n\r\n        label.setText(GlobalStorage.getInstance().getUserID()+\"님\");\r\n        label2.setText(\"My Best Score: \" + GlobalStorage.getInstance().getUserBestScore());\r\n        panel.add(label);\r\n        panel.add(label2);\r\n\r\n\r\n        JButton button1 = new JButton(); //score\r\n//        JButton button2 = new JButton();\r\n        JButton button3 = new JButton(); //2p\r\n        JButton ranking = new JButton();\r\n        JButton mypage = new JButton();\r\n        JButton Info = new JButton(); //howtoP lay 버튼\r\n\r\n        //버튼 투명하게\r\n        button1.setOpaque(false);\r\n//        button2.setOpaque(false);\r\n        button3.setOpaque(false);\r\n        ranking.setOpaque(false);\r\n        mypage.setOpaque(false);\r\n        Info.setOpaque(false);\r\n\r\n        //버튼 테투리 없애기\r\n        button1.setBorderPainted(false);\r\n//        button2.setBorderPainted(false);\r\n        button3.setBorderPainted(false);\r\n        ranking.setBorderPainted(false);\r\n        mypage.setBorderPainted(false);\r\n        Info.setBorderPainted(false);\r\n\r\n        button1.setBounds(59, 50, 311, 103);\r\n//        button2.setBounds(59, 160, 300, 110);\r\n        button3.setBounds(59, 230, 311, 103);\r\n        ranking.setBounds(59,405,311,103);\r\n        Info.setBounds(423,230,311, 103 ); //howtoplay\r\n        mypage.setBounds(423,405,311, 103 );\r\n\r\n        button1.setFont(new Font(\"Arial\", Font.PLAIN, 60));\r\n//        button2.setFont(new Font(\"Arial\", Font.PLAIN, 20));\r\n        button3.setFont(new Font(\"Arial\", Font.PLAIN, 20));\r\n\r\n        button1.setBackground(new Color(36, 54, 105));\r\n//        button2.setBackground(new Color(36, 54, 105));\r\n        button3.setBackground(new Color(36, 54, 105));\r\n        ranking.setBackground(new Color(36,54, 105 ));\r\n        mypage.setBackground(new Color(36,54, 105 ));\r\n        Info.setBackground(new Color(36,54, 105 ));\r\n\r\n//        button2.setForeground(Color.WHITE);\r\n        button1.setForeground(Color.WHITE);\r\n        button3.setForeground(Color.WHITE);\r\n        ranking.setForeground(Color.WHITE);\r\n        mypage.setForeground(Color.WHITE);\r\n        Info.setForeground(Color.WHITE);\r\n\r\n        button1.addActionListener(new ActionListener() {\r\n\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                Thread thread = new Thread(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n\r\n                        Game game = new Game(\"1p\");\r\n                        game.gameLoop();\r\n                    }\r\n                });\r\n                thread.start();\r\n            }\r\n        });\r\n\r\n        button3.addActionListener(new ActionListener() {\r\n\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                Thread thread = new Thread(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n\r\n                        Game game = new Game(\"2p\");\r\n                        game.gameLoop();\r\n                    }\r\n                });\r\n                thread.start();\r\n            }\r\n        });\r\n\r\n        ranking.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                Thread thread = new Thread(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        Ranking ranking = new Ranking();\r\n                    }\r\n                });\r\n                thread.start();\r\n            }\r\n        });\r\n\r\n        mypage.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                Thread thread = new Thread(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        Mypage mypage = new Mypage();\r\n                    }\r\n                });\r\n                thread.start();\r\n            }\r\n        });\r\n\r\n\r\n        Info.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n\r\n                        HowToPlay howToPlay = new HowToPlay();\r\n                        howToPlay.showHowToPlay();\r\n                    }\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        panel.add(button1);\r\n//        panel.add(button2);\r\n        panel.add(button3);\r\n        panel.add(Info);\r\n        panel.add(ranking);\r\n        panel.add(mypage);\r\n\r\n        getContentPane().add(panel);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    public static void main(String[] args) {\r\n//        SwingUtilities.invokeLater(new Runnable() {\r\n//            @Override\r\n//            public void run() {\r\n//                LoginPage loginPage = new LoginPage();\r\n//                loginPage.setLoginLiscctener(new LoginPage.LoginListener() {\r\n//                    @Override\r\n//                    public void loginSuccess(String email) {\r\n//                        Window window = new Window();\r\n//                        window.showWindow();\r\n//\r\n//                    }\r\n//                });\r\n//            }\r\n//        });\r\n\r\n        Window window = new Window();\r\n        window.showWindow();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/spaceinvaders/Window.java b/src/main/java/spaceinvaders/Window.java
--- a/src/main/java/spaceinvaders/Window.java	(revision 2418d80f17199f80cc7f9b121d5db4fddc3f9ca3)
+++ b/src/main/java/spaceinvaders/Window.java	(date 1681648848539)
@@ -217,22 +217,20 @@
 
 
     public static void main(String[] args) {
-//        SwingUtilities.invokeLater(new Runnable() {
-//            @Override
-//            public void run() {
-//                LoginPage loginPage = new LoginPage();
-//                loginPage.setLoginLiscctener(new LoginPage.LoginListener() {
-//                    @Override
-//                    public void loginSuccess(String email) {
-//                        Window window = new Window();
-//                        window.showWindow();
-//
-//                    }
-//                });
-//            }
-//        });
-
-        Window window = new Window();
-        window.showWindow();
+        SwingUtilities.invokeLater(new Runnable() {
+            @Override
+            public void run() {
+                LoginPage loginPage = new LoginPage();
+                loginPage.setLoginLiscctener(new LoginPage.LoginListener() {
+                    @Override
+                    public void loginSuccess(String email) {
+                        Window window = new Window();
+                        window.showWindow();
+
+                    }
+                });
+            }
+        });
+
     }
 }
\ No newline at end of file
